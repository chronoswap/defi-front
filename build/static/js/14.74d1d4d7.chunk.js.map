{"version":3,"sources":["views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/BunnySpecialCard.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx","hooks/useGetWalletNfts.ts"],"names":["NftGrid","styled","div","theme","mediaQueries","sm","md","BunnySpeciaCard","nft","lastUpdated","props","useState","isClaimable","setIsClaimable","account","useWeb3React","bunnySpecialContract","useBunnySpecialContract","bunnyId","useEffect","a","methods","canClaimSingle","call","fetchClaimStatus","NftCard","canClaim","onClaim","mintNFT","send","from","nftComponents","10","11","12","EasterNftCard","13","14","NftList","useGetWalletNfts","nftTokenIds","nfts","refresh","orderBy","map","tokenIds","Card","name","StyledHero","colors","textSubtle","Collectibles","TranslateString","useI18n","Page","as","size","color","pancakeRabbitsContract","getPancakeRabbitContract","initialState","isLoading","Date","now","reducer","state","action","type","data","timestamp","useReducer","dispatch","balanceOf","getTokenIdAndBunnyId","index","tokenOfOwnerByIndex","getBunnyId","tokenURI","tokenId","makeBatchRequest","tokenUri","Number","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","fetchNfts"],"mappings":"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","file":"static/js/14.74d1d4d7.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useEffect, useState } from 'react'\nimport { PromiEvent } from 'web3-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useBunnySpecialContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\nconst BunnySpeciaCard: React.FC<NftCardProps> = ({ nft, lastUpdated, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const bunnySpecialContract = useBunnySpecialContract()\n  const { bunnyId } = nft\n\n  const handleClaim = (): PromiEvent<Contract> => {\n    return bunnySpecialContract.methods.mintNFT(bunnyId).send({ from: account })\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaimSingle = await bunnySpecialContract.methods.canClaimSingle(account, bunnyId).call()\n      setIsClaimable(canClaimSingle)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, bunnyId, lastUpdated, bunnySpecialContract, setIsClaimable])\n\n  return <NftCard nft={nft} lastUpdated={lastUpdated} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default BunnySpeciaCard\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport useGetWalletNfts from 'hooks/useGetWalletNfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport BunnySpeciaCard from './NftCard/BunnySpecialCard'\nimport EasterNftCard from './NftCard/EasterNftCard'\n\n/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */\nconst nftComponents = {\n  10: BunnySpeciaCard,\n  11: BunnySpeciaCard,\n  12: EasterNftCard,\n  13: EasterNftCard,\n  14: EasterNftCard,\n}\n\nconst NftList = () => {\n  const { nfts: nftTokenIds, refresh, lastUpdated } = useGetWalletNfts()\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const tokenIds = nftTokenIds[nft.bunnyId] ? nftTokenIds[nft.bunnyId].tokenIds : []\n        const Card = nftComponents[nft.bunnyId] || NftCard\n\n        return (\n          <div key={nft.name}>\n            <Card nft={nft} tokenIds={tokenIds} refresh={refresh} lastUpdated={lastUpdated} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\">\n          {TranslateString(999, 'Chronostone Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect, useReducer } from 'react'\nimport { getPancakeRabbitContract } from 'utils/contractHelpers'\nimport makeBatchRequest from 'utils/makeBatchRequest'\n\nconst pancakeRabbitsContract = getPancakeRabbitContract()\n\nexport type NftMap = {\n  [key: number]: {\n    tokenUri: string\n    tokenIds: number[]\n  }\n}\n\ntype Action = { type: 'set_nfts'; data: NftMap } | { type: 'reset' } | { type: 'refresh'; timestamp: number }\n\ntype State = {\n  isLoading: boolean\n  nfts: NftMap\n  lastUpdated: number\n}\n\nconst initialState: State = {\n  isLoading: true,\n  nfts: {},\n  lastUpdated: Date.now(),\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'set_nfts':\n      return {\n        ...initialState,\n        isLoading: false,\n        nfts: action.data,\n      }\n    case 'refresh':\n      return {\n        ...initialState,\n        lastUpdated: action.timestamp,\n      }\n    case 'reset':\n      return {\n        ...initialState,\n        isLoading: false,\n      }\n    default:\n      return state\n  }\n}\n\nconst useGetWalletNfts = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n  const { lastUpdated } = state\n\n  useEffect(() => {\n    const fetchNfts = async () => {\n      try {\n        const balanceOf = await pancakeRabbitsContract.methods.balanceOf(account).call()\n\n        if (balanceOf > 0) {\n          const getTokenIdAndBunnyId = async (index: number) => {\n            try {\n              const { tokenOfOwnerByIndex, getBunnyId, tokenURI } = pancakeRabbitsContract.methods\n              const tokenId = await tokenOfOwnerByIndex(account, index).call()\n              const [bunnyId, tokenUri] = await makeBatchRequest([getBunnyId(tokenId).call, tokenURI(tokenId).call])\n\n              return [Number(bunnyId), Number(tokenId), tokenUri]\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < balanceOf; i++) {\n            tokenIdPromises.push(getTokenIdAndBunnyId(i))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n\n          const nfts: NftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [bunnyId, tokenId, tokenUri] = association\n\n            return {\n              ...accum,\n              [bunnyId]: {\n                tokenUri,\n                tokenIds: accum[bunnyId] ? [...accum[bunnyId].tokenIds, tokenId] : [tokenId],\n              },\n            }\n          }, {})\n\n          dispatch({ type: 'set_nfts', data: nfts })\n        } else {\n          // Reset it in case of wallet change\n          dispatch({ type: 'reset' })\n        }\n      } catch (error) {\n        dispatch({ type: 'reset' })\n      }\n    }\n\n    if (account) {\n      fetchNfts()\n    }\n  }, [account, lastUpdated, dispatch])\n\n  const refresh = () => dispatch({ type: 'refresh', timestamp: Date.now() })\n\n  return { ...state, refresh }\n}\n\nexport default useGetWalletNfts\n"],"sourceRoot":""}