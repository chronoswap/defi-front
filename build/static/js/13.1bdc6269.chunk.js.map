{"version":3,"sources":["views/Farms/components/types.ts","utils/getLiquidityUrlPathParts.ts","views/Farms/components/FarmCard/DetailsSection.tsx","views/Farms/components/FarmCard/CardHeading.tsx","hooks/useFarmStakedPrice.tsx","components/ModalInput/ModalInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","utils/compoundApyHelpers.ts","views/Farms/components/FarmCard/ApyCalculatorModal.tsx","views/Farms/components/FarmCard/ApyButton.tsx","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/FarmTable/Apr.tsx","views/Farms/components/FarmTable/Farm.tsx","views/Farms/components/FarmTable/Earned.tsx","views/Farms/components/FarmTable/Details.tsx","views/Farms/components/FarmTable/Multiplier.tsx","views/Farms/components/FarmTable/Liquidity.tsx","views/Farms/components/FarmTable/Actions/styles.ts","views/Farms/components/FarmTable/Actions/HarvestAction.tsx","views/Farms/components/FarmTable/Actions/StakedAction.tsx","views/Farms/components/FarmTable/Actions/ActionPanel.tsx","views/Farms/components/FarmTable/CellLayout.tsx","views/Farms/components/FarmTable/Row.tsx","views/Farms/components/FarmTable/FarmTable.tsx","views/Farms/components/FarmTabButtons/index.tsx","views/Farms/components/SearchInput.tsx","views/Farms/components/ToggleView/ToggleView.tsx","views/Farms/components/Select/Select.tsx","views/Farms/Farms.tsx","components/ExpandableSectionButton/ExpandableSectionButton.tsx","views/Farms/components/Tooltip/Tooltip.tsx"],"names":["ViewMode","getLiquidityUrlPathParts","quoteTokenAddress","tokenAddress","wBNBAddressString","getWbnbAddress","quoteTokenAddressString","chainId","tokenAddressString","secondPart","Wrapper","styled","div","StyledLinkExternal","LinkExternal","DetailsSection","bscScanAddress","infoAddress","removed","totalValueFormatted","lpLabel","addLiquidityUrl","TranslateString","useI18n","justifyContent","href","name","Flex","MultiplierTag","Tag","CardHeading","multiplier","isCommunityFarm","farmImage","tokenSymbol","alignItems","mb","src","alt","width","height","flexDirection","split","variant","useFarmStakedPrice","pid","farmLiquidity","useState","farmStakedPrice","setFarmStakedPrice","account","useWeb3React","farm","useRefresh","fastRefresh","useFarmFromPid","lpContract","useLP","getAddress","lpAddresses","useEffect","a","methods","balanceOf","getMasterChefAddress","call","rawlpSupply","lpSupply","BigNumber","token","decimals","lpPrice","stakedBalance","userData","stakedBalancePrice","times","toNumber","fetchStaked","StyledTokenInput","theme","colors","input","isWarning","shadows","warning","inset","text","StyledInput","Input","mediaQueries","xs","sm","StyledErrorMessage","Text","ModalInput","max","symbol","onChange","onSelectMax","value","inputTitle","isBalanceZero","displayBalance","parseFloat","toFixed","style","position","pl","fontSize","toLocaleString","placeholder","scale","onClick","mr","color","bold","external","DepositModal","onConfirm","onDismiss","tokenName","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","useCallback","e","currentTarget","handleSelectMax","title","ModalActions","disabled","alignSelf","WithdrawModal","IconButtonWrapper","StakeAction","tokenBalance","onStake","useStake","onUnstake","useUnstake","rawStakedBalance","getBalanceNumber","useModal","onPresentDeposit","onPresentWithdraw","CardBusdValue","HarvestAction","earnings","onReward","useHarvest","cakePrice","usePriceCakeBusd","rawEarningsBalance","earningsUsd","Action","CardActions","requestedApproval","setRequestedApproval","useFarmFromSymbol","lpSymbol","useFarmUser","allowance","lpAddress","lpName","toUpperCase","isApproved","isGreaterThan","web3","useWeb3","liquidity","getBep20Contract","onApprove","useApprove","handleApprove","console","error","textTransform","pr","mt","UnlockButton","calculateCakeEarnedPerThousandDollars","number","numberOfDays","apyAsDecimal","farmApy","daysAsDecimalOfYear","principal","finalAmount","Math","round","apyModalRoi","amountEarned","amountInvested","Grid","GridItem","Description","ApyCalculatorModal","apy","oneThousandDollarsWorthOfCake","cakeEarnedPerThousand1D","cakeEarnedPerThousand7D","cakeEarnedPerThousand30D","cakeEarnedPerThousand365D","ApyButton","onPresentApyModal","event","stopPropagation","ml","RainbowLight","keyframes","StyledCardAccent","FCard","props","card","background","Divider","borderColor","ExpandingWrapper","expanded","FarmCard","showExpandableSection","setShowExpandableSection","communityFarms","includes","toLocaleLowerCase","undefined","maximumFractionDigits","replace","earnLabel","dual","farmAPY","liquidityUrlPathParts","quoteToken","address","BASE_ADD_LIQUIDITY_URL","process","display","CardActionsContainer","ExpandableSectionButton","Container","textSubtle","AprWrapper","Apr","originalValue","hideButton","IconImage","Image","Farm","image","label","Amount","span","earned","textDisabled","Earned","primary","ArrowIcon","ChevronDownIcon","toggled","Details","actionPanelToggled","isMobile","useMatchBreakpoints","isXl","MultiplierWrapper","Multiplier","displayMultiplier","toLowerCase","Tooltip","content","LiquidityWrapper","Liquidity","displayLiquidity","Number","ActionContainer","xl","ActionTitles","Title","secondary","Subtle","ActionContent","Staked","earningsBigNumber","earningsBusd","multipliedBy","useCountUp","start","end","duration","separator","countUp","update","updateValue","useRef","current","lg","StakeContainer","TagsContainer","InfoContainer","ValueContainer","ValueWrapper","ActionPanel","details","apr","isActive","bsc","info","StakedAction","Label","ContentContainer","CellLayout","children","MobileColumnSchema","id","translationId","sortable","DesktopColumnSchema","cells","CellInner","StyledTr","tr","EarnedMobileCell","td","AprMobileCell","FarmMobileCell","Row","setActionPanelToggled","toggleActionPanel","isXs","tableSchema","columnNames","map","column","Object","keys","key","columnIndex","indexOf","React","createElement","colSpan","dropShadow","TableWrapper","StyledTable","table","TableBody","tbody","TableContainer","ScrollButtonContainer","FarmTable","tableWrapperEl","data","columns","rows","useTable","sortColumn","ref","row","original","scrollIntoView","behavior","FarmTabButtons","useRouteMatch","url","isExact","activeIndex","as","Link","to","InputWrapper","SearchInput","setToggled","inputEl","onBlur","ToggleView","viewMode","onToggle","handleToggle","mode","CARD","TABLE","DropDownHeader","inputSecondary","DropDownListContainer","zIndices","dropdown","DropDownContainer","isOpen","css","tooltip","boxShadow","DropDownList","ul","ListItem","li","Select","options","containerRef","dropdownRef","setIsOpen","selectedOption","setSelectedOption","containerSize","setContainerSize","toggling","onOptionClicked","option","offsetWidth","offsetHeight","ControlContainer","ToggleWrapper","LabelWrapper","FilterContainer","ViewControls","StyledImage","Header","gradients","bubblegum","Farms","path","pathname","useLocation","farmsLP","useFarms","query","setQuery","setViewMode","sortOption","setSortOption","prices","useGetApiPrices","dispatch","useAppDispatch","fetchFarmUserDataAsync","stakedOnly","setStakedOnly","activeFarms","filter","inactiveFarms","stakedOnlyFarms","stakedInactiveFarms","farmsList","farmsToDisplay","farmsToDisplayWithAPY","lpTotalInQuoteToken","quoteTokenPriceUsd","totalLiquidity","getFarmApy","poolWeight","lowercaseQuery","farmsStaked","rowData","farms","orderBy","slice","sortFarms","size","Page","checked","marginLeft","target","length","sort","b","exact","renderContent","aria-label","role","defaultProps","TooltipContent","modal","className"],"mappings":"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","file":"static/js/13.1bdc6269.chunk.js","sourcesContent":["export type TableProps = {\n  data?: TableDataTypes[]\n  selectedFilters?: string\n  sortBy?: string\n  sortDir?: string\n  onSort?: (value: string) => void\n}\n\nexport type ColumnsDefTypes = {\n  id: number\n  label: string\n  name: string\n  translationId: number\n  sortable: boolean\n}\n\nexport type ScrollBarProps = {\n  ref: string\n  width: number\n}\n\nexport type TableDataTypes = {\n  POOL: string\n  APY: string\n  EARNED: string\n  STAKED: string\n  DETAILS: string\n  LINKS: string\n}\n\nexport const MobileColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport const DesktopColumnSchema: ColumnsDefTypes[] = [\n  {\n    id: 1,\n    name: 'farm',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n  {\n    id: 2,\n    name: 'earned',\n    translationId: 1072,\n    sortable: true,\n    label: 'Earned',\n  },\n  {\n    id: 3,\n    name: 'apr',\n    translationId: 736,\n    sortable: true,\n    label: 'APR',\n  },\n  {\n    id: 4,\n    name: 'liquidity',\n    translationId: 999,\n    sortable: true,\n    label: 'Liquidity',\n  },\n  {\n    id: 5,\n    name: 'multiplier',\n    translationId: 999,\n    sortable: true,\n    label: 'Multiplier',\n  },\n  {\n    id: 6,\n    name: 'details',\n    translationId: 999,\n    sortable: true,\n    label: '',\n  },\n]\n\nexport enum ViewMode {\n  'TABLE' = 'TABLE',\n  'CARD' = 'CARD',\n}\n","// Constructing the two forward-slash-separated parts of the 'Add Liquidity' URL\n// Each part of the url represents a different side of the LP pair.\nimport { getWbnbAddress } from './addressHelpers'\n\nconst getLiquidityUrlPathParts = ({ quoteTokenAddress, tokenAddress }) => {\n  const chainId = process.env.REACT_APP_CHAIN_ID\n  const wBNBAddressString = getWbnbAddress()\n  const quoteTokenAddressString: string = quoteTokenAddress ? quoteTokenAddress[chainId] : null\n  const tokenAddressString: string = tokenAddress ? tokenAddress[chainId] : null\n  const firstPart =\n    !quoteTokenAddressString || quoteTokenAddressString === wBNBAddressString ? 'BNB' : quoteTokenAddressString\n  const secondPart = !tokenAddressString || tokenAddressString === wBNBAddressString ? 'BNB' : tokenAddressString\n  return `${firstPart}/${secondPart}`\n}\n\nexport default getLiquidityUrlPathParts\n","import React from 'react'\nimport useI18n from 'hooks/useI18n'\nimport styled from 'styled-components'\nimport { Text, Flex, LinkExternal } from '@pancakeswap-libs/uikit'\n\nexport interface ExpandableSectionProps {\n  bscScanAddress?: string\n  infoAddress?: string\n  removed?: boolean\n  totalValueFormatted?: string\n  lpLabel?: string\n  addLiquidityUrl?: string\n}\n\nconst Wrapper = styled.div`\n  margin-top: 24px;\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst DetailsSection: React.FC<ExpandableSectionProps> = ({\n  bscScanAddress,\n  infoAddress,\n  removed,\n  totalValueFormatted,\n  lpLabel,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(354, 'Total Liquidity')}:</Text>\n        <Text>{totalValueFormatted}</Text>\n      </Flex>\n      {!removed && (\n        <StyledLinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n        </StyledLinkExternal>\n      )}\n      <StyledLinkExternal href={bscScanAddress}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n      <StyledLinkExternal href={infoAddress}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n    </Wrapper>\n  )\n}\n\nexport default DetailsSection\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  isCommunityFarm?: boolean\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 4px;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  isCommunityFarm,\n  farmImage,\n  tokenSymbol,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.svg`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel.split(' ')[0]}</Heading>\n        <Flex justifyContent=\"center\">\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          <MultiplierTag variant=\"secondary\">{multiplier}</MultiplierTag>\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmFromPid, usePriceCakeBusd, useGetApiPrice } from 'state/hooks'\nimport { useLP } from 'hooks/useContract'\nimport lpToken from 'config/abi/lpToken.json'\nimport { getAddress, getMasterChefAddress } from 'utils/addressHelpers'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useFarmStakedPrice = (pid, farmLiquidity) => {\n  const [farmStakedPrice, setFarmStakedPrice] = useState(0.0)\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n  const farm = useFarmFromPid(pid)\n\n  const lpContract = useLP(getAddress(farm.lpAddresses))\n  useEffect(() => {\n    const fetchStaked = async () => {\n      const rawlpSupply = await lpContract.methods.balanceOf(getMasterChefAddress()).call()\n      const lpSupply = new BigNumber(rawlpSupply).div(10**farm.token.decimals)\n      const lpPrice = farmLiquidity.div(lpSupply)\n      const stakedBalance = new BigNumber(farm.userData.stakedBalance).div(10**farm.token.decimals)\n      const stakedBalancePrice = stakedBalance.times(lpPrice)\n      setFarmStakedPrice(stakedBalancePrice.toNumber())\n    }\n\n    if (account) {\n      fetchStaked()\n    }\n  }, [account, farm, lpContract, farmLiquidity])\n\n  return farmStakedPrice\n}\n\nexport default useFarmStakedPrice\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Text, Button, Input, InputProps, Flex, Link } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface ModalInputProps {\n  max: string\n  symbol: string\n  onSelectMax?: () => void\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  value: string\n  addLiquidityUrl?: string\n  inputTitle?: string\n}\n\nconst getBoxShadow = ({ isWarning = false, theme }) => {\n  if (isWarning) {\n    return theme.shadows.warning\n  }\n\n  return theme.shadows.inset\n}\n\nconst StyledTokenInput = styled.div<InputProps>`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  box-shadow: ${getBoxShadow};\n  color: ${({ theme }) => theme.colors.text};\n  padding: 8px 16px 8px 0;\n  width: 100%;\n`\n\nconst StyledInput = styled(Input)`\n  box-shadow: none;\n  width: 60px;\n  margin: 0 8px;\n  padding: 0 8px;\n\n  ${({ theme }) => theme.mediaQueries.xs} {\n    width: 80px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n  }\n`\n\nconst StyledErrorMessage = styled(Text)`\n  position: absolute;\n  bottom: -22px;\n  a {\n    display: inline;\n  }\n`\n\nconst ModalInput: React.FC<ModalInputProps> = ({\n  max,\n  symbol,\n  onChange,\n  onSelectMax,\n  value,\n  addLiquidityUrl,\n  inputTitle,\n}) => {\n  const TranslateString = useI18n()\n  const isBalanceZero = max === '0' || !max\n\n  const displayBalance = isBalanceZero ? '0' : parseFloat(max).toFixed(4)\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <StyledTokenInput isWarning={isBalanceZero}>\n        <Flex justifyContent=\"space-between\" pl=\"16px\">\n          <Text fontSize=\"14px\">{inputTitle}</Text>\n          <Text fontSize=\"14px\">\n            {TranslateString(1120, 'Balance')}: {displayBalance.toLocaleString()}\n          </Text>\n        </Flex>\n        <Flex alignItems=\"flex-end\" justifyContent=\"space-around\">\n          <StyledInput onChange={onChange} placeholder=\"0\" value={value} />\n          <Button scale=\"sm\" onClick={onSelectMax} mr=\"8px\">\n            {TranslateString(452, 'Max')}\n          </Button>\n          <Text fontSize=\"16px\">{symbol}</Text>\n        </Flex>\n      </StyledTokenInput>\n      {isBalanceZero && (\n        <StyledErrorMessage fontSize=\"14px\" color=\"failure\">\n          No tokens to stake:{' '}\n          <Link fontSize=\"14px\" bold={false} href={addLiquidityUrl} external color=\"failure\">\n            {TranslateString(999, 'get')} {symbol}\n          </Link>\n        </StyledErrorMessage>\n      )}\n    </div>\n  )\n}\n\nexport default ModalInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal, LinkExternal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  addLiquidityUrl?: string\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '', addLiquidityUrl }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1068, 'Stake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        addLiquidityUrl={addLiquidityUrl}\n        inputTitle={TranslateString(1070, 'Stake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          disabled={pendingTx || fullBalance === '0' || val === '0'}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n      <LinkExternal href={addLiquidityUrl} style={{ alignSelf: 'center' }}>\n        {TranslateString(999, 'Get')} {tokenName}\n      </LinkExternal>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport ModalInput from 'components/ModalInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={TranslateString(1126, 'Unstake LP tokens')} onDismiss={onDismiss}>\n      <ModalInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n        inputTitle={TranslateString(588, 'Unstake')}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss} width=\"100%\">\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n          width=\"100%\"\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useFarmStakedPrice from 'hooks/useFarmStakedPrice'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  farmLiquidity?: BigNumber\n  addLiquidityUrl?: string\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({\n  stakedBalance,\n  tokenBalance,\n  tokenName,\n  pid,\n  farmLiquidity,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n  const farmStakedPrice = useFarmStakedPrice(pid, farmLiquidity)\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake LP')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" width=\"14px\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n        <CardBusdValue value={farmStakedPrice}/>\n      </Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useWeb3React } from '@web3-react/core'\nimport CardBusdValue from '../../../Home/components/CardBusdValue'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n\n  const cakePrice = usePriceCakeBusd()\n  const rawEarningsBalance = account ? getBalanceNumber(earnings) : 0\n  const earningsUsd = cakePrice.times(rawEarningsBalance).toNumber()\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb=\"8px\" justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>\n        {displayBalance}\n        <CardBusdValue value={earningsUsd}/>\n      </Heading>\n      <Button\n        disabled={rawEarningsBalance === 0 || pendingTx}\n        onClick={async () => {\n          setPendingTx(true)\n          await onReward()\n          setPendingTx(false)\n        }}\n      >\n        {TranslateString(562, 'Harvest')}\n      </Button>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { provider as ProviderType } from 'web3-core'\nimport { getAddress } from 'utils/addressHelpers'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport useWeb3 from 'hooks/useWeb3'\nimport { useApprove } from 'hooks/useApprove'\nimport UnlockButton from 'components/UnlockButton'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n  liquidity?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  provider?: ProviderType\n  account?: string\n  addLiquidityUrl?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, account, addLiquidityUrl }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses } = useFarmFromSymbol(farm.lpSymbol)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = getAddress(lpAddresses)\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const web3 = useWeb3()\n  const farmLiquidity = farm.liquidity ? farm.liquidity : new BigNumber(0)\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction\n        stakedBalance={stakedBalance}\n        tokenBalance={tokenBalance}\n        tokenName={lpName}\n        pid={pid}\n        farmLiquidity={farmLiquidity}\n        addLiquidityUrl={addLiquidityUrl}\n      />\n    ) : (\n      <Button mt=\"8px\" width=\"100%\" disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(758, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {/* TODO: Is there a way to get a dynamic value here from useFarmFromSymbol? */}\n          CAKE\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1072, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(1074, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" width=\"100%\" /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","const roundToTwoDp = (number) => Math.round(number * 100) / 100\n\nexport const calculateCakeEarnedPerThousandDollars = ({ numberOfDays, farmApy, cakePrice }) => {\n  // Everything here is worked out relative to a year, with the asset compounding daily\n  const timesCompounded = 365\n  //   We use decimal values rather than % in the math for both APY and the number of days being calculates as a proportion of the year\n  const apyAsDecimal = farmApy / 100\n  const daysAsDecimalOfYear = numberOfDays / timesCompounded\n  //   Calculate the starting CAKE balance with a dollar balance of $1000.\n  const principal = 1000 / cakePrice\n\n  // This is a translation of the typical mathematical compounding APY formula. Details here: https://www.calculatorsoup.com/calculators/financial/compound-interest-calculator.php\n  const finalAmount = principal * (1 + apyAsDecimal / timesCompounded) ** (timesCompounded * daysAsDecimalOfYear)\n\n  // To get the cake earned, deduct the amount after compounding (finalAmount) from the starting CAKE balance (principal)\n  const interestEarned = finalAmount - principal\n  return roundToTwoDp(interestEarned)\n}\n\nexport const apyModalRoi = ({ amountEarned, amountInvested }) => {\n  const percentage = (amountEarned / amountInvested) * 100\n  return percentage.toFixed(2)\n}\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { Modal, Text, LinkExternal, Flex } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { calculateCakeEarnedPerThousandDollars, apyModalRoi } from 'utils/compoundApyHelpers'\n\ninterface ApyCalculatorModalProps {\n  onDismiss?: () => void\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-template-rows: repeat(4, auto);\n  margin-bottom: 24px;\n`\n\nconst GridItem = styled.div`\n  margin-bottom: '10px';\n`\n\nconst Description = styled(Text)`\n  max-width: 320px;\n  margin-bottom: 28px;\n`\n\nconst ApyCalculatorModal: React.FC<ApyCalculatorModalProps> = ({\n  onDismiss,\n  lpLabel,\n  cakePrice,\n  apy,\n  addLiquidityUrl,\n}) => {\n  const TranslateString = useI18n()\n  const oneThousandDollarsWorthOfCake = 1000 / cakePrice.toNumber()\n\n  const cakeEarnedPerThousand1D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 1, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand7D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 7, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand30D = calculateCakeEarnedPerThousandDollars({ numberOfDays: 30, farmApy: apy, cakePrice })\n  const cakeEarnedPerThousand365D = calculateCakeEarnedPerThousandDollars({\n    numberOfDays: 365,\n    farmApy: apy,\n    cakePrice,\n  })\n\n  return (\n    <Modal title=\"ROI\" onDismiss={onDismiss}>\n      <Grid>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(860, 'Timeframe')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(858, 'ROI')}\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text fontSize=\"12px\" bold color=\"textSubtle\" textTransform=\"uppercase\" mb=\"20px\">\n            {TranslateString(864, 'CAKE per $1000')}\n          </Text>\n        </GridItem>\n        {/* 1 day row */}\n        <GridItem>\n          <Text>1d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand1D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand1D}</Text>\n        </GridItem>\n        {/* 7 day row */}\n        <GridItem>\n          <Text>7d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand7D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand7D}</Text>\n        </GridItem>\n        {/* 30 day row */}\n        <GridItem>\n          <Text>30d</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand30D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand30D}</Text>\n        </GridItem>\n        {/* 365 day / APY row */}\n        <GridItem>\n          <Text>365d(APY)</Text>\n        </GridItem>\n        <GridItem>\n          <Text>\n            {apyModalRoi({ amountEarned: cakeEarnedPerThousand365D, amountInvested: oneThousandDollarsWorthOfCake })}%\n          </Text>\n        </GridItem>\n        <GridItem>\n          <Text>{cakeEarnedPerThousand365D}</Text>\n        </GridItem>\n      </Grid>\n      <Description fontSize=\"12px\" color=\"textSubtle\">\n        {TranslateString(\n          866,\n          'Calculated based on current rates. Compounding once daily. Rates are estimates provided for your convenience only, and by no means represent guaranteed returns.',\n        )}\n      </Description>\n      <Flex justifyContent=\"center\">\n        <LinkExternal href={addLiquidityUrl}>\n          {TranslateString(999, 'Get')} {lpLabel}\n        </LinkExternal>\n      </Flex>\n    </Modal>\n  )\n}\n\nexport default ApyCalculatorModal\n","import React from 'react'\nimport BigNumber from 'bignumber.js'\nimport { IconButton, useModal, CalculateIcon } from '@pancakeswap-libs/uikit'\nimport ApyCalculatorModal from './ApyCalculatorModal'\n\nexport interface ApyButtonProps {\n  lpLabel?: string\n  cakePrice?: BigNumber\n  apy?: number\n  addLiquidityUrl?: string\n}\n\nconst ApyButton: React.FC<ApyButtonProps> = ({ lpLabel, cakePrice, apy, addLiquidityUrl }) => {\n  const [onPresentApyModal] = useModal(\n    <ApyCalculatorModal lpLabel={lpLabel} cakePrice={cakePrice} apy={apy} addLiquidityUrl={addLiquidityUrl} />,\n  )\n\n  const handleClickButton = (event): void => {\n    event.stopPropagation()\n    onPresentApyModal()\n  }\n\n  return (\n    <IconButton onClick={handleClickButton} variant=\"text\" scale=\"sm\" ml=\"4px\">\n      <CalculateIcon width=\"18px\" />\n    </IconButton>\n  )\n}\n\nexport default ApyButton\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider as ProviderType } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: number\n  liquidity?: BigNumber\n}\n\nconst RainbowLight = keyframes`\n\t0% {\n\t\tbackground-position: 0% 50%;\n\t}\n\t50% {\n\t\tbackground-position: 100% 50%;\n\t}\n\t100% {\n\t\tbackground-position: 0% 50%;\n\t}\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(\n    45deg,\n    rgba(255, 0, 0, 1) 0%,\n    rgba(255, 154, 0, 1) 10%,\n    rgba(208, 222, 33, 1) 20%,\n    rgba(79, 220, 74, 1) 30%,\n    rgba(63, 218, 216, 1) 40%,\n    rgba(47, 201, 226, 1) 50%,\n    rgba(28, 127, 238, 1) 60%,\n    rgba(95, 21, 242, 1) 70%,\n    rgba(186, 12, 248, 1) 80%,\n    rgba(251, 7, 217, 1) 90%,\n    rgba(255, 0, 0, 1) 100%\n  );\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 32px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  provider?: ProviderType\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  const isCommunityFarm = communityFarms.includes(farm.token.symbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n\n  const totalValueFormatted = farm.liquidity\n    ? `$${farm.liquidity.toNumber().toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('ONETHOUSAND', '')\n  const earnLabel = farm.dual ? farm.dual.earnLabel : 'ThoP'\n  const farmAPY = farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 })\n\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: farm.quoteToken.address,\n    tokenAddress: farm.token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  return (\n    <FCard>\n      {farm.token.symbol === 'ONEK' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n        multiplier={farm.multiplier}\n        isCommunityFarm={isCommunityFarm}\n        farmImage={farmImage}\n        tokenSymbol={farm.token.symbol}\n      />\n      {!removed && (\n        <Flex justifyContent=\"space-between\" alignItems=\"center\">\n          <Text>{TranslateString(736, 'APR')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n                <ApyButton lpLabel={lpLabel} addLiquidityUrl={addLiquidityUrl} cakePrice={cakePrice} apy={farm.apy} />\n                {farmAPY}%\n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n          </Text>\n        </Flex>\n      )}\n      <Flex justifyContent=\"space-between\">\n        <Text>{TranslateString(318, 'Earn')}:</Text>\n        <Text bold>{earnLabel}</Text>\n      </Flex>\n      <CardActionsContainer farm={farm} account={account} addLiquidityUrl={addLiquidityUrl} />\n      <Divider />\n      <ExpandableSectionButton\n        onClick={() => setShowExpandableSection(!showExpandableSection)}\n        expanded={showExpandableSection}\n      />\n      <ExpandingWrapper expanded={showExpandableSection}>\n        <DetailsSection\n          removed={removed}\n          bscScanAddress={`https://bscscan.com/address/${farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]}`}\n          infoAddress={`https://pancakeswap.info/pair/${lpAddress}`}\n          totalValueFormatted={totalValueFormatted}\n          lpLabel={lpLabel}\n          addLiquidityUrl={addLiquidityUrl}\n        />\n      </ExpandingWrapper>\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport ApyButton from 'views/Farms/components/FarmCard/ApyButton'\nimport { Address } from 'config/constants/types'\nimport BigNumber from 'bignumber.js'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport useI18n from 'hooks/useI18n'\n\nexport interface AprProps {\n  value: string\n  multiplier: string\n  lpLabel: string\n  tokenAddress?: Address\n  quoteTokenAddress?: Address\n  cakePrice: BigNumber\n  originalValue: number\n  hideButton?: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n  color: ${({ theme }) => theme.colors.text};\n\n  button {\n    width: 20px;\n    height: 20px;\n\n    svg {\n      path {\n        fill: ${({ theme }) => theme.colors.textSubtle};\n      }\n    }\n  }\n`\n\nconst AprWrapper = styled.div`\n  min-width: 60px;\n  text-align: left;\n`\n\nconst Apr: React.FC<AprProps> = ({\n  value,\n  lpLabel,\n  tokenAddress,\n  quoteTokenAddress,\n  cakePrice,\n  originalValue,\n  hideButton = false,\n}) => {\n  const TranslateString = useI18n()\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({ quoteTokenAddress, tokenAddress })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n\n  return originalValue !== 0 ? (\n    <Container>\n      {originalValue ? (\n        <>\n          <AprWrapper>{value}%</AprWrapper>\n          {!hideButton && (\n            <ApyButton lpLabel={lpLabel} cakePrice={cakePrice} apy={originalValue} addLiquidityUrl={addLiquidityUrl} />\n          )}\n        </>\n      ) : (\n        <AprWrapper>{TranslateString(656, 'Loading...')}</AprWrapper>\n      )}\n    </Container>\n  ) : (\n    <Container>\n      <AprWrapper>{originalValue}%</AprWrapper>\n    </Container>\n  )\n}\n\nexport default Apr\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport { Text, Image } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\n\nexport interface FarmProps {\n  label: string\n  pid: number\n  image: string\n}\n\nconst IconImage = styled(Image)`\n  width: 24px;\n  height: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 40px;\n    height: 40px;\n  }\n`\n\nconst Container = styled.div`\n  padding-left: 16px;\n  display: flex;\n  align-items: center;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 32px;\n  }\n`\n\nconst Farm: React.FunctionComponent<FarmProps> = ({ image, label, pid }) => {\n  const { stakedBalance } = useFarmUser(pid)\n  const TranslateString = useI18n()\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n\n  const handleRenderFarming = (): JSX.Element => {\n    if (rawStakedBalance) {\n      return (\n        <Text color=\"secondary\" fontSize=\"12px\" bold>\n          {TranslateString(999, 'FARMING')}\n        </Text>\n      )\n    }\n\n    return null\n  }\n\n  return (\n    <Container>\n      <IconImage src={`/images/farms/${image}.svg`} alt=\"icon\" width={40} height={40} mr=\"8px\" />\n      <div>\n        {handleRenderFarming()}\n        <Text bold>{label}</Text>\n      </div>\n    </Container>\n  )\n}\n\nexport default Farm\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useWeb3React } from '@web3-react/core'\n\nexport interface EarnedProps {\n  earnings: number\n  pid: number\n}\n\nconst Amount = styled.span<{ earned: number }>`\n  color: ${({ earned, theme }) => (earned ? theme.colors.text : theme.colors.textDisabled)};\n  display: flex;\n  align-items: center;\n`\n\nconst Earned: React.FunctionComponent<EarnedProps> = ({ earnings }) => {\n  const { account } = useWeb3React()\n  const amountEarned = account ? earnings : null\n\n  const displayBalance = amountEarned ? amountEarned.toLocaleString() : '?'\n  return <Amount earned={amountEarned}>{displayBalance}</Amount>\n}\n\nexport default Earned\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\ninterface DetailsProps {\n  actionPanelToggled: boolean\n}\n\nconst Container = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  padding-right: 8px;\n  color: ${({ theme }) => theme.colors.primary};\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-right: 0px;\n  }\n`\n\nconst ArrowIcon = styled(ChevronDownIcon)<{ toggled: boolean }>`\n  transform: ${({ toggled }) => (toggled ? 'rotate(180deg)' : 'rotate(0)')};\n  height: 20px;\n`\n\nconst Details: React.FC<DetailsProps> = ({ actionPanelToggled }) => {\n  const TranslateString = useI18n()\n  const { isXl } = useMatchBreakpoints()\n  const isMobile = !isXl\n\n  return (\n    <Container>\n      {!isMobile && TranslateString(658, 'Details')}\n      <ArrowIcon color=\"primary\" toggled={actionPanelToggled} />\n    </Container>\n  )\n}\n\nexport default Details\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface MultiplierProps {\n  multiplier: string\n}\n\nconst MultiplierWrapper = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  width: 36px;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Multiplier: React.FunctionComponent<MultiplierProps> = ({ multiplier }) => {\n  const displayMultiplier = multiplier ? multiplier.toLowerCase() : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <MultiplierWrapper>{displayMultiplier}</MultiplierWrapper>\n      <Tooltip\n        content={\n          <div>\n            {TranslateString(999, 'The multiplier represents the amount of CAKE rewards each farm gets.')}\n            <br />\n            <br />\n            {TranslateString(\n              999,\n              'For example, if a 1x farm was getting 1 CAKE per block, a 40x farm would be getting 40 CAKE per block.',\n            )}\n          </div>\n        }\n      >\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Multiplier\n","import React from 'react'\nimport styled from 'styled-components'\nimport { HelpIcon, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Tooltip from '../Tooltip/Tooltip'\n\nexport interface LiquidityProps {\n  liquidity: number\n}\n\nconst LiquidityWrapper = styled.div`\n  min-width: 110px;\n  font-weight: 600;\n  text-align: right;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    text-align: left;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  align-items: center;\n\n  svg {\n    margin-left: 14px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    svg {\n      margin-left: 0;\n    }\n  }\n`\n\nconst Liquidity: React.FunctionComponent<LiquidityProps> = ({ liquidity }) => {\n  const displayLiquidity = liquidity\n    ? `$${Number(liquidity).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n  const TranslateString = useI18n()\n\n  return (\n    <Container>\n      <LiquidityWrapper>\n        <Text>{displayLiquidity}</Text>\n      </LiquidityWrapper>\n      <Tooltip content={TranslateString(999, 'The total value of the funds in this farm’s liquidity pool')}>\n        <HelpIcon color=\"textSubtle\" />\n      </Tooltip>\n    </Container>\n  )\n}\n\nexport default Liquidity\n","import styled from 'styled-components'\n\nexport const ActionContainer = styled.div`\n  padding: 16px;\n  border: 2px solid ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  flex-grow: 1;\n  flex-basis: 0;\n  margin-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 12px;\n    margin-right: 12px;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    margin-left: 48px;\n    margin-right: 0;\n    margin-bottom: 0;\n    max-height: 100px;\n  }\n`\n\nexport const ActionTitles = styled.div`\n  font-weight: 600;\n  font-size: 12px;\n  margin-bottom: 8px;\n`\n\nexport const Title = styled.span`\n  color: ${({ theme }) => theme.colors.secondary};\n`\n\nexport const Subtle = styled.span`\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n\nexport const ActionContent = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`\nexport const Earned = styled.div`\n  font-weight: 600;\n  font-size: 20px;\n  color: ${({ theme }) => theme.colors.text};\n`\n\nexport const Staked = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n`\n","import React, { useState, useRef, useEffect } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useHarvest } from 'hooks/useHarvest'\nimport useI18n from 'hooks/useI18n'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { useCountUp } from 'react-countup'\n\nimport { ActionContainer, ActionTitles, Title, Subtle, ActionContent, Earned, Staked } from './styles'\n\nconst HarvestAction: React.FunctionComponent<FarmWithStakedValue> = ({ pid, userData }) => {\n  const { account } = useWeb3React()\n  const earningsBigNumber = userData && account ? new BigNumber(userData.earnings) : null\n  const cakePrice = usePriceCakeBusd()\n  let earnings = null\n  let earningsBusd = 0\n  let displayBalance = '?'\n\n  if (earningsBigNumber) {\n    earnings = getBalanceNumber(earningsBigNumber)\n    earningsBusd = new BigNumber(earnings).multipliedBy(cakePrice).toNumber()\n    displayBalance = earnings.toLocaleString()\n  }\n\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const TranslateString = useI18n()\n\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: earningsBusd,\n    duration: 1,\n    separator: ',',\n    decimals: 3,\n  })\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(earningsBusd)\n  }, [earningsBusd, updateValue])\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Title>CAKE </Title>\n        <Subtle>{TranslateString(1072, 'EARNED')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <div>\n          <Earned>{displayBalance}</Earned>\n          <Staked>~{countUp}USD</Staked>\n        </div>\n        <Button\n          disabled={!earnings || pendingTx || !account}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n          ml=\"4px\"\n        >\n          {TranslateString(562, 'Harvest')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default HarvestAction\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Button, useModal, IconButton, AddIcon, MinusIcon } from '@pancakeswap-libs/uikit'\nimport UnlockButton from 'components/UnlockButton'\nimport { useWeb3React } from '@web3-react/core'\nimport { useFarmUser } from 'state/hooks'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport useI18n from 'hooks/useI18n'\nimport { useApprove } from 'hooks/useApprove'\nimport { getBep20Contract } from 'utils/contractHelpers'\nimport { BASE_ADD_LIQUIDITY_URL } from 'config'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport useWeb3 from 'hooks/useWeb3'\n\nimport DepositModal from '../../DepositModal'\nimport WithdrawModal from '../../WithdrawModal'\nimport { ActionContainer, ActionTitles, ActionContent, Earned, Title, Subtle } from './styles'\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n`\n\nconst Staked: React.FunctionComponent<FarmWithStakedValue> = ({ pid, lpSymbol, lpAddresses, quoteToken, token }) => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { allowance, tokenBalance, stakedBalance } = useFarmUser(pid)\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n  const web3 = useWeb3()\n\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const addLiquidityUrl = `${BASE_ADD_LIQUIDITY_URL}/${liquidityUrlPathParts}`\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(\n    <DepositModal max={tokenBalance} onConfirm={onStake} tokenName={lpSymbol} addLiquidityUrl={addLiquidityUrl} />,\n  )\n  const [onPresentWithdraw] = useModal(<WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={lpSymbol} />)\n\n  const lpContract = getBep20Contract(lpAddress, web3)\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  if (!account) {\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'START FARMING')}</Subtle>\n        </ActionTitles>\n        <ActionContent>\n          <UnlockButton width=\"100%\" />\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  if (isApproved) {\n    if (rawStakedBalance) {\n      return (\n        <ActionContainer>\n          <ActionTitles>\n            <Title>{lpSymbol} </Title>\n            <Subtle>{TranslateString(999, 'STAKED')}</Subtle>\n          </ActionTitles>\n          <ActionContent>\n            <div>\n              <Earned>{displayBalance}</Earned>\n            </div>\n            <IconButtonWrapper>\n              <IconButton variant=\"secondary\" onClick={onPresentWithdraw} mr=\"6px\">\n                <MinusIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n              <IconButton variant=\"secondary\" onClick={onPresentDeposit}>\n                <AddIcon color=\"primary\" width=\"14px\" />\n              </IconButton>\n            </IconButtonWrapper>\n          </ActionContent>\n        </ActionContainer>\n      )\n    }\n\n    return (\n      <ActionContainer>\n        <ActionTitles>\n          <Subtle>{TranslateString(999, 'STAKE')} </Subtle>\n          <Title>{lpSymbol}</Title>\n        </ActionTitles>\n        <ActionContent>\n          <Button width=\"100%\" onClick={onPresentDeposit} variant=\"secondary\">\n            {TranslateString(999, 'Stake LP')}\n          </Button>\n        </ActionContent>\n      </ActionContainer>\n    )\n  }\n\n  return (\n    <ActionContainer>\n      <ActionTitles>\n        <Subtle>{TranslateString(999, 'ENABLE FARM')}</Subtle>\n      </ActionTitles>\n      <ActionContent>\n        <Button width=\"100%\" disabled={requestedApproval} onClick={handleApprove} variant=\"secondary\">\n          {TranslateString(999, 'Enable')}\n        </Button>\n      </ActionContent>\n    </ActionContainer>\n  )\n}\n\nexport default Staked\n","import React from 'react'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\nimport { LinkExternal, Text } from '@pancakeswap-libs/uikit'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport getLiquidityUrlPathParts from 'utils/getLiquidityUrlPathParts'\nimport { communityFarms } from 'config/constants'\nimport { CommunityTag, CoreTag, DualTag } from 'components/Tags'\n\nimport HarvestAction from './HarvestAction'\nimport StakedAction from './StakedAction'\nimport Apr, { AprProps } from '../Apr'\nimport Multiplier, { MultiplierProps } from '../Multiplier'\nimport Liquidity, { LiquidityProps } from '../Liquidity'\n\nexport interface ActionPanelProps {\n  apr: AprProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst Container = styled.div`\n  background: ${({ theme }) => theme.colors.background};\n  display: flex;\n  width: 100%;\n  flex-direction: column-reverse;\n  padding: 24px;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    flex-direction: row;\n    padding: 16px 32px;\n  }\n`\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  font-weight: 400;\n`\n\nconst StakeContainer = styled.div`\n  color: ${({ theme }) => theme.colors.text};\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n  }\n`\n\nconst TagsContainer = styled.div`\n  display: flex;\n  align-items: center;\n  margin-top: 25px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-top: 16px;\n  }\n\n  > div {\n    height: 24px;\n    padding: 0 6px;\n    font-size: 14px;\n    margin-right: 4px;\n\n    svg {\n      width: 14px;\n    }\n  }\n`\n\nconst ActionContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    align-items: center;\n    flex-grow: 1;\n    flex-basis: 0;\n  }\n`\n\nconst InfoContainer = styled.div`\n  min-width: 200px;\n`\n\nconst ValueContainer = styled.div`\n  display: block;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    display: none;\n  }\n`\n\nconst ValueWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin: 4px 0px;\n`\n\nconst ActionPanel: React.FunctionComponent<ActionPanelProps> = ({ details, apr, multiplier, liquidity }) => {\n  const farm = details\n\n  const TranslateString = useI18n()\n  const isActive = farm.multiplier !== '0X'\n  const { quoteToken, token, dual } = farm\n  const lpLabel = farm.lpSymbol && farm.lpSymbol.toUpperCase().replace('PANCAKE', '')\n  const liquidityUrlPathParts = getLiquidityUrlPathParts({\n    quoteTokenAddress: quoteToken.address,\n    tokenAddress: token.address,\n  })\n  const lpAddress = farm.lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const bsc = `https://bscscan.com/address/${lpAddress}`\n  const info = `https://pancakeswap.info/pair/${lpAddress}`\n  const isCommunityFarm = communityFarms.includes(token.symbol)\n\n  return (\n    <Container>\n      <InfoContainer>\n        {isActive && (\n          <StakeContainer>\n            <StyledLinkExternal href={`https://exchange.pancakeswap.finance/#/add/${liquidityUrlPathParts}`}>\n              {TranslateString(999, `Get ${lpLabel}`, { name: lpLabel })}\n            </StyledLinkExternal>\n          </StakeContainer>\n        )}\n        <StyledLinkExternal href={bsc}>{TranslateString(999, 'View Contract')}</StyledLinkExternal>\n        <StyledLinkExternal href={info}>{TranslateString(999, 'See Pair Info')}</StyledLinkExternal>\n        <TagsContainer>\n          {isCommunityFarm ? <CommunityTag /> : <CoreTag />}\n          {dual ? <DualTag /> : null}\n        </TagsContainer>\n      </InfoContainer>\n      <ValueContainer>\n        <ValueWrapper>\n          <Text>{TranslateString(736, 'APR')}</Text>\n          <Apr {...apr} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Multiplier')}</Text>\n          <Multiplier {...multiplier} />\n        </ValueWrapper>\n        <ValueWrapper>\n          <Text>{TranslateString(999, 'Liquidity')}</Text>\n          <Liquidity {...liquidity} />\n        </ValueWrapper>\n      </ValueContainer>\n      <ActionContainer>\n        <HarvestAction {...farm} />\n        <StakedAction {...farm} />\n      </ActionContainer>\n    </Container>\n  )\n}\n\nexport default ActionPanel\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Label = styled.div`\n  font-size: 12px;\n  color: ${({ theme }) => theme.colors.textSubtle};\n  text-align: left;\n`\n\nconst ContentContainer = styled.div`\n  min-height: 24px;\n  display: flex;\n  align-items: center;\n`\n\ninterface CellLayoutProps {\n  label?: string\n}\n\nconst CellLayout: React.FC<CellLayoutProps> = ({ label = '', children }) => {\n  return (\n    <div>\n      {label && <Label>{label}</Label>}\n      <ContentContainer>{children}</ContentContainer>\n    </div>\n  )\n}\n\nexport default CellLayout\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { FarmWithStakedValue } from 'views/Farms/components/FarmCard/FarmCard'\nimport { useMatchBreakpoints } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Apr, { AprProps } from './Apr'\nimport Farm, { FarmProps } from './Farm'\nimport Earned, { EarnedProps } from './Earned'\nimport Details from './Details'\nimport Multiplier, { MultiplierProps } from './Multiplier'\nimport Liquidity, { LiquidityProps } from './Liquidity'\nimport ActionPanel from './Actions/ActionPanel'\nimport CellLayout from './CellLayout'\nimport { DesktopColumnSchema, MobileColumnSchema } from '../types'\n\nexport interface RowProps {\n  apr: AprProps\n  farm: FarmProps\n  earned: EarnedProps\n  multiplier: MultiplierProps\n  liquidity: LiquidityProps\n  details: FarmWithStakedValue\n}\n\nconst cells = {\n  apr: Apr,\n  farm: Farm,\n  earned: Earned,\n  details: Details,\n  multiplier: Multiplier,\n  liquidity: Liquidity,\n}\n\nconst CellInner = styled.div`\n  padding: 24px 0px;\n  display: flex;\n  width: 100%;\n  align-items: center;\n  padding-right: 8px;\n\n  ${({ theme }) => theme.mediaQueries.xl} {\n    padding-right: 32px;\n  }\n`\n\nconst StyledTr = styled.tr`\n  cursor: pointer;\n  border-bottom: 2px solid ${({ theme }) => theme.colors.borderColor};\n`\n\nconst EarnedMobileCell = styled.td`\n  padding: 16px 0 24px 16px;\n`\n\nconst AprMobileCell = styled.td`\n  padding-top: 16px;\n  padding-bottom: 24px;\n`\n\nconst FarmMobileCell = styled.td`\n  padding-top: 24px;\n`\n\nconst Row: React.FunctionComponent<RowProps> = (props) => {\n  const { details } = props\n  const [actionPanelToggled, setActionPanelToggled] = useState(false)\n  const TranslateString = useI18n()\n\n  const toggleActionPanel = () => {\n    setActionPanelToggled(!actionPanelToggled)\n  }\n\n  const { isXl, isXs } = useMatchBreakpoints()\n\n  const isMobile = !isXl\n  const tableSchema = isMobile ? MobileColumnSchema : DesktopColumnSchema\n  const columnNames = tableSchema.map((column) => column.name)\n\n  const handleRenderRow = () => {\n    if (!isXs) {\n      return (\n        <StyledTr onClick={toggleActionPanel}>\n          {Object.keys(props).map((key) => {\n            const columnIndex = columnNames.indexOf(key)\n            if (columnIndex === -1) {\n              return null\n            }\n\n            switch (key) {\n              case 'details':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout>\n                        <Details actionPanelToggled={actionPanelToggled} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              case 'apr':\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout label={TranslateString(736, 'APR')}>\n                        <Apr {...props.apr} hideButton={isMobile} />\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n              default:\n                return (\n                  <td key={key}>\n                    <CellInner>\n                      <CellLayout\n                        label={TranslateString(tableSchema[columnIndex].translationId, tableSchema[columnIndex].label)}\n                      >\n                        {React.createElement(cells[key], props[key])}\n                      </CellLayout>\n                    </CellInner>\n                  </td>\n                )\n            }\n          })}\n        </StyledTr>\n      )\n    }\n\n    return (\n      <StyledTr onClick={toggleActionPanel}>\n        <td>\n          <tr>\n            <FarmMobileCell>\n              <CellLayout>\n                <Farm {...props.farm} />\n              </CellLayout>\n            </FarmMobileCell>\n          </tr>\n          <tr>\n            <EarnedMobileCell>\n              <CellLayout label={TranslateString(1072, 'Earned')}>\n                <Earned {...props.earned} />\n              </CellLayout>\n            </EarnedMobileCell>\n            <AprMobileCell>\n              <CellLayout label={TranslateString(736, 'APR')}>\n                <Apr {...props.apr} hideButton />\n              </CellLayout>\n            </AprMobileCell>\n          </tr>\n        </td>\n        <td>\n          <CellInner>\n            <CellLayout>\n              <Details actionPanelToggled={actionPanelToggled} />\n            </CellLayout>\n          </CellInner>\n        </td>\n      </StyledTr>\n    )\n  }\n\n  return (\n    <>\n      {handleRenderRow()}\n      {actionPanelToggled && details && (\n        <tr>\n          <td colSpan={6}>\n            <ActionPanel {...props} />\n          </td>\n        </tr>\n      )}\n    </>\n  )\n}\n\nexport default Row\n","import React, { useRef } from 'react'\nimport styled from 'styled-components'\nimport { useTable, Button, ChevronUpIcon, ColumnType } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nimport Row, { RowProps } from './Row'\n\nexport interface ITableProps {\n  data: RowProps[]\n  columns: ColumnType<RowProps>[]\n  sortColumn?: string\n}\n\nconst Container = styled.div`\n  filter: ${({ theme }) => theme.card.dropShadow};\n  width: 100%;\n  background: ${({ theme }) => theme.card.background};\n  border-radius: 16px;\n  margin: 16px 0px;\n`\n\nconst TableWrapper = styled.div`\n  overflow: visible;\n\n  &::-webkit-scrollbar {\n    display: none;\n  }\n`\n\nconst StyledTable = styled.table`\n  border-collapse: collapse;\n  font-size: 14px;\n  border-radius: 4px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n`\n\nconst TableBody = styled.tbody`\n  & tr {\n    td {\n      font-size: 16px;\n      vertical-align: middle;\n    }\n  }\n`\n\nconst TableContainer = styled.div`\n  position: relative;\n`\n\nconst ScrollButtonContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  padding-top: 5px;\n  padding-bottom: 5px;\n`\n\nconst FarmTable: React.FC<ITableProps> = (props) => {\n  const tableWrapperEl = useRef<HTMLDivElement>(null)\n  const TranslateString = useI18n()\n  const { data, columns } = props\n\n  const { rows } = useTable(columns, data, { sortable: true, sortColumn: 'farm' })\n\n  const scrollToTop = (): void => {\n    tableWrapperEl.current.scrollIntoView({\n      behavior: 'smooth',\n    })\n  }\n\n  return (\n    <Container>\n      <TableContainer>\n        <TableWrapper ref={tableWrapperEl}>\n          <StyledTable>\n            <TableBody>\n              {rows.map((row) => {\n                return <Row {...row.original} key={`table-row-${row.id}`} />\n              })}\n            </TableBody>\n          </StyledTable>\n        </TableWrapper>\n        <ScrollButtonContainer>\n          <Button variant=\"text\" onClick={scrollToTop}>\n            {TranslateString(999, 'To Top')}\n            <ChevronUpIcon color=\"primary\" />\n          </Button>\n        </ScrollButtonContainer>\n      </TableContainer>\n    </Container>\n  )\n}\n\nexport default FarmTable\n","import React from 'react'\nimport styled from 'styled-components'\nimport { useRouteMatch, Link } from 'react-router-dom'\nimport { ButtonMenu, ButtonMenuItem } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nconst FarmTabButtons = () => {\n  const { url, isExact } = useRouteMatch()\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper>\n      <ButtonMenu activeIndex={isExact ? 0 : 1} scale=\"sm\" variant=\"subtle\">\n        <ButtonMenuItem as={Link} to={`${url}`}>\n          {TranslateString(1198, 'Live')}\n        </ButtonMenuItem>\n        <ButtonMenuItem as={Link} to={`${url}/history`}>\n          {TranslateString(388, 'Finished')}\n        </ButtonMenuItem>\n      </ButtonMenu>\n    </Wrapper>\n  )\n}\n\nexport default FarmTabButtons\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  a {\n    padding-left: 12px;\n    padding-right: 12px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 16px;\n  }\n`\n","import React, { useState, useRef } from 'react'\nimport { Input } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\n\nconst StyledInput = styled(Input)`\n  border-radius: 16px;\n  margin-left: auto;\n`\n\nconst InputWrapper = styled.div`\n  position: relative;\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: 234px;\n    display: block;\n  }\n`\n\nconst Container = styled.div<{ toggled: boolean }>``\n\ninterface Props {\n  value: string\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nconst SearchInput: React.FC<Props> = ({ value, onChange }) => {\n  const [toggled, setToggled] = useState(false)\n  const inputEl = useRef(null)\n\n  return (\n    <Container toggled={toggled}>\n      <InputWrapper>\n        <StyledInput\n          ref={inputEl}\n          value={value}\n          onChange={onChange}\n          placeholder=\"Search farms\"\n          onBlur={() => setToggled(false)}\n        />\n      </InputWrapper>\n    </Container>\n  )\n}\n\nexport default SearchInput\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ListViewIcon, CardViewIcon, IconButton } from '@pancakeswap-libs/uikit'\nimport { ViewMode } from '../types'\n\ninterface ToggleViewProps {\n  viewMode: ViewMode\n  onToggle: (mode: ViewMode) => void\n}\n\nconst Container = styled.div`\n  margin-left: -8px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    margin-left: 0;\n  }\n`\n\nconst ToggleView: React.FunctionComponent<ToggleViewProps> = ({ viewMode, onToggle }) => {\n  const handleToggle = (mode: ViewMode) => {\n    if (viewMode !== mode) {\n      onToggle(mode)\n    }\n  }\n\n  return (\n    <Container>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.CARD)}>\n        <CardViewIcon color={viewMode === ViewMode.CARD ? 'primary' : 'textDisabled'} />\n      </IconButton>\n      <IconButton variant=\"text\" scale=\"sm\" onClick={() => handleToggle(ViewMode.TABLE)}>\n        <ListViewIcon color={viewMode === ViewMode.TABLE ? 'primary' : 'textDisabled'} />\n      </IconButton>\n    </Container>\n  )\n}\n\nexport default ToggleView\n","import React, { useState, useRef, useEffect } from 'react'\nimport styled, { css } from 'styled-components'\nimport { ArrowDropDownIcon, Text } from '@pancakeswap-libs/uikit'\n\nconst DropDownHeader = styled.div`\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  padding: 0px 16px;\n  box-shadow: ${({ theme }) => theme.shadows.inset};\n  border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n  border-radius: 16px;\n  background: ${({ theme }) => theme.colors.input};\n  transition: border-radius 0.15s;\n`\n\nconst DropDownListContainer = styled.div`\n  min-width: 136px;\n  height: 0;\n  position: absolute;\n  overflow: hidden;\n  background: ${({ theme }) => theme.colors.input};\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n  transition: transform 0.15s, opacity 0.15s;\n  transform: scaleY(0);\n  transform-origin: top;\n  opacity: 0;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n`\n\nconst DropDownContainer = styled.div<{ isOpen: boolean; width: number; height: number }>`\n  cursor: pointer;\n  width: ${({ width }) => width}px;\n  position: relative;\n  background: ${({ theme }) => theme.colors.input};\n  border-radius: 16px;\n  height: 40px;\n  min-width: 136px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    min-width: 168px;\n  }\n\n  ${(props) =>\n    props.isOpen &&\n    css`\n      ${DropDownHeader} {\n        border-bottom: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n        border-radius: 16px 16px 0 0;\n      }\n\n      ${DropDownListContainer} {\n        height: auto;\n        transform: scaleY(1);\n        opacity: 1;\n        border: 1px solid ${({ theme }) => theme.colors.inputSecondary};\n        border-top-width: 0;\n        border-radius: 0 0 16px 16px;\n        box-shadow: ${({ theme }) => theme.tooltip.boxShadow};\n      }\n    `}\n\n  svg {\n    position: absolute;\n    right: 16px;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\n\nconst DropDownList = styled.ul`\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n  z-index: ${({ theme }) => theme.zIndices.dropdown};\n`\n\nconst ListItem = styled.li`\n  list-style: none;\n  padding: 8px 16px;\n  &:hover {\n    background: ${({ theme }) => theme.colors.inputSecondary};\n  }\n`\n\nexport interface SelectProps {\n  options: OptionProps[]\n  onChange?: (option: OptionProps) => void\n}\n\nexport interface OptionProps {\n  label: string\n  value: any\n}\n\nconst Select: React.FunctionComponent<SelectProps> = ({ options, onChange }) => {\n  const containerRef = useRef(null)\n  const dropdownRef = useRef(null)\n  const [isOpen, setIsOpen] = useState(false)\n  const [selectedOption, setSelectedOption] = useState(options[0])\n  const [containerSize, setContainerSize] = useState({ width: 0, height: 0 })\n\n  const toggling = () => setIsOpen(!isOpen)\n\n  const onOptionClicked = (option: OptionProps) => () => {\n    setSelectedOption(option)\n    setIsOpen(false)\n\n    if (onChange) {\n      onChange(option)\n    }\n  }\n\n  useEffect(() => {\n    setContainerSize({\n      width: dropdownRef.current.offsetWidth, // Consider border\n      height: dropdownRef.current.offsetHeight,\n    })\n  }, [])\n\n  return (\n    <DropDownContainer isOpen={isOpen} ref={containerRef} {...containerSize}>\n      {containerSize.width !== 0 && (\n        <DropDownHeader onClick={toggling}>\n          <Text>{selectedOption.label}</Text>\n        </DropDownHeader>\n      )}\n      <ArrowDropDownIcon color=\"text\" onClick={toggling} />\n      <DropDownListContainer>\n        <DropDownList ref={dropdownRef}>\n          {options.map((option) =>\n            option.label !== selectedOption.label ? (\n              <ListItem onClick={onOptionClicked(option)} key={option.label}>\n                <Text>{option.label}</Text>\n              </ListItem>\n            ) : null,\n          )}\n        </DropDownList>\n      </DropDownListContainer>\n    </DropDownContainer>\n  )\n}\n\nexport default Select\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch, useLocation } from 'react-router-dom'\nimport { useAppDispatch } from 'state'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { Image, Heading, RowType, Toggle, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { Farm } from 'state/types'\nimport useI18n from 'hooks/useI18n'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { getFarmApy } from 'utils/apy'\nimport { orderBy } from 'lodash'\n\nimport { getAddress } from 'utils/addressHelpers'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport Table from './components/FarmTable/FarmTable'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport SearchInput from './components/SearchInput'\nimport { RowProps } from './components/FarmTable/Row'\nimport ToggleView from './components/ToggleView/ToggleView'\nimport { DesktopColumnSchema, ViewMode } from './components/types'\nimport Select, { OptionProps } from './components/Select/Select'\n\nconst ControlContainer = styled.div`\n  display: flex;\n  width: 100%;\n  align-items: center;\n  position: relative;\n\n  justify-content: space-between;\n  flex-direction: column;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 16px 32px;\n  }\n`\n\nconst ToggleWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  margin-left: 10px;\n\n  ${Text} {\n    margin-left: 8px;\n  }\n`\n\nconst LabelWrapper = styled.div`\n  > ${Text} {\n    font-size: 12px;\n  }\n`\n\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  width: 100%;\n  padding: 8px 0px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    width: auto;\n    padding: 0;\n  }\n`\n\nconst ViewControls = styled.div`\n  flex-wrap: wrap;\n  justify-content: space-between;\n  display: flex;\n  align-items: center;\n  width: 100%;\n\n  > div {\n    padding: 8px 0px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    justify-content: flex-start;\n    width: auto;\n\n    > div {\n      padding: 0;\n    }\n  }\n`\n\nconst StyledImage = styled(Image)`\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 58px;\n`\n\nconst Header = styled.div`\n  padding: 32px 0px;\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\n\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nconst Farms: React.FC = () => {\n  const { path } = useRouteMatch()\n  const { pathname } = useLocation()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const [query, setQuery] = useState('')\n  const [viewMode, setViewMode] = useState(ViewMode.CARD)\n  const { account } = useWeb3React()\n  const [sortOption, setSortOption] = useState('hot')\n  const prices = useGetApiPrices()\n\n  const dispatch = useAppDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n  const isActive = !pathname.includes('history')\n\n  const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const stakedInactiveFarms = inactiveFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  const sortFarms = (farms: FarmWithStakedValue[]): FarmWithStakedValue[] => {\n    switch (sortOption) {\n      case 'apr':\n        return orderBy(farms, (farm: FarmWithStakedValue) => farm.apy, 'desc')\n      case 'multiplier':\n        return orderBy(\n          farms,\n          (farm: FarmWithStakedValue) => (farm.multiplier ? Number(farm.multiplier.slice(0, -1)) : 0),\n          'desc',\n        )\n      case 'earned':\n        return orderBy(farms, (farm: FarmWithStakedValue) => (farm.userData ? farm.userData.earnings : 0), 'desc')\n      case 'liquidity':\n        return orderBy(farms, (farm: FarmWithStakedValue) => Number(farm.liquidity), 'desc')\n      default:\n        return farms\n    }\n  }\n\n  const farmsList = useCallback(\n    (farmsToDisplay: Farm[]): FarmWithStakedValue[] => {\n      let farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        if (!farm.lpTotalInQuoteToken || !prices) {\n          return farm\n        }\n\n        const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address, true).toLowerCase()]  // TODO true en el getAddress\n        const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n        const apy = isActive ? getFarmApy(farm.poolWeight, cakePrice, totalLiquidity) : 0\n\n        return { ...farm, apy, liquidity: totalLiquidity }\n      })\n\n      if (query) {\n        const lowercaseQuery = query.toLowerCase()\n        farmsToDisplayWithAPY = farmsToDisplayWithAPY.filter((farm: FarmWithStakedValue) => {\n          return farm.lpSymbol.toLowerCase().includes(lowercaseQuery)\n        })\n      }\n      return farmsToDisplayWithAPY\n    },\n    [cakePrice, prices, query, isActive],\n  )\n\n  const handleChangeQuery = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value)\n  }\n\n  let farmsStaked = []\n  if (isActive) {\n    farmsStaked = stakedOnly ? farmsList(stakedOnlyFarms) : farmsList(activeFarms)\n  } else {\n    farmsStaked = stakedOnly ? farmsList(stakedInactiveFarms) : farmsList(inactiveFarms)\n  }\n\n  farmsStaked = sortFarms(farmsStaked)\n\n  const rowData = farmsStaked.map((farm) => {\n    const { token, quoteToken } = farm\n    const tokenAddress = token.address\n    const quoteTokenAddress = quoteToken.address\n    const lpLabel = farm.lpSymbol && farm.lpSymbol.split(' ')[0].toUpperCase().replace('PANCAKE', '')\n\n    const row: RowProps = {\n      apr: {\n        value: farm.apy && farm.apy.toLocaleString('en-US', { maximumFractionDigits: 2 }),\n        multiplier: farm.multiplier,\n        lpLabel,\n        tokenAddress,\n        quoteTokenAddress,\n        cakePrice,\n        originalValue: farm.apy,\n      },\n      farm: {\n        image: farm.lpSymbol.split(' ')[0].toLocaleLowerCase(),\n        label: lpLabel,\n        pid: farm.pid,\n      },\n      earned: {\n        earnings: farm.userData ? getBalanceNumber(new BigNumber(farm.userData.earnings)) : null,\n        pid: farm.pid,\n      },\n      liquidity: {\n        liquidity: farm.liquidity,\n      },\n      multiplier: {\n        multiplier: farm.multiplier,\n      },\n      details: farm,\n    }\n    return row\n  })\n\n  const renderContent = (): JSX.Element => {\n    if (viewMode === ViewMode.TABLE && rowData.length) {\n      const columnSchema = DesktopColumnSchema\n\n      const columns = columnSchema.map((column) => ({\n        id: column.id,\n        name: column.name,\n        label: column.label,\n        sort: (a: RowType<RowProps>, b: RowType<RowProps>) => {\n          switch (column.name) {\n            case 'farm':\n              return b.id - a.id\n            case 'apr':\n              if (a.original.apr.value && b.original.apr.value) {\n                return Number(a.original.apr.value) - Number(b.original.apr.value)\n              }\n\n              return 0\n            case 'earned':\n              return a.original.earned.earnings - b.original.earned.earnings\n            default:\n              return 1\n          }\n        },\n        sortable: column.sortable,\n      }))\n\n      return <Table data={rowData} columns={columns} />\n    }\n    return (\n      <div>\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed={false} />\n            ))}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsStaked.map((farm) => (\n              <FarmCard key={farm.pid} farm={farm} cakePrice={cakePrice} account={account} removed />\n            ))}\n          </Route>\n        </FlexLayout>\n      </div>\n    )\n  }\n\n  const handleSortOptionChange = (option: OptionProps): void => {\n    setSortOption(option.value)\n  }\n\n  return (\n    <>\n      <Header>\n        <Heading as=\"h1\" size=\"xxl\" color=\"secondary\" mb=\"24px\">\n          {TranslateString(674, 'Farms')}\n        </Heading>\n        <Heading size=\"lg\" color=\"text\">\n          {TranslateString(999, 'Stake Liquidity Pool (LP) tokens to earn.')}\n        </Heading>\n      </Header>\n      <Page>\n        <ControlContainer>\n          <ViewControls>\n            <ToggleView viewMode={viewMode} onToggle={(mode: ViewMode) => setViewMode(mode)} />\n            <ToggleWrapper>\n              <Toggle checked={stakedOnly} onChange={() => setStakedOnly(!stakedOnly)} scale=\"sm\" />\n              <Text> {TranslateString(1116, 'Staked only')}</Text>\n            </ToggleWrapper>\n            <FarmTabButtons />\n          </ViewControls>\n          <FilterContainer>\n            <LabelWrapper>\n              <Text>SORT BY</Text>\n              <Select\n                options={[\n                  {\n                    label: 'Hot',\n                    value: 'hot',\n                  },\n                  {\n                    label: 'APR',\n                    value: 'apr',\n                  },\n                  {\n                    label: 'Multiplier',\n                    value: 'multiplier',\n                  },\n                  {\n                    label: 'Earned',\n                    value: 'earned',\n                  },\n                  {\n                    label: 'Liquidity',\n                    value: 'liquidity',\n                  },\n                ]}\n                onChange={handleSortOptionChange}\n              />\n            </LabelWrapper>\n            <LabelWrapper style={{ marginLeft: 16 }}>\n              <Text>SEARCH</Text>\n              <SearchInput onChange={handleChangeQuery} value={query} />\n            </LabelWrapper>\n          </FilterContainer>\n        </ControlContainer>\n        {renderContent()}\n        <StyledImage src=\"/images/3dpan.png\" alt=\"Pancake illustration\" width={120} height={103} />\n      </Page>\n    </>\n  )\n}\n\nexport default Farms\n","import React from 'react'\nimport styled from 'styled-components'\nimport { ChevronDownIcon, ChevronUpIcon, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\n\nexport interface ExpandableSectionButtonProps {\n  onClick?: () => void\n  expanded?: boolean\n}\n\nconst Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n\n  svg {\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst ExpandableSectionButton: React.FC<ExpandableSectionButtonProps> = ({ onClick, expanded }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Wrapper aria-label=\"Hide or show expandable content\" role=\"button\" onClick={() => onClick()}>\n      <Text color=\"primary\" bold>\n        {expanded ? TranslateString(1066, 'Hide') : TranslateString(658, 'Details')}\n      </Text>\n      {expanded ? <ChevronUpIcon /> : <ChevronDownIcon />}\n    </Wrapper>\n  )\n}\n\nExpandableSectionButton.defaultProps = {\n  expanded: false,\n}\n\nexport default ExpandableSectionButton\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface TooltipProps {\n  content: React.ReactNode\n  className?: string\n}\n\nconst TooltipContent = styled.div`\n  background: ${({ theme }) => theme.tooltip.background};\n  padding: 16px;\n  border-radius: 16px;\n  color: ${({ theme }) => theme.tooltip.text};\n  width: max-content;\n  display: none;\n  max-height: 500px;\n  z-index: ${({ theme }) => theme.zIndices.modal};\n  position: absolute;\n  bottom: calc(100% + 16px);\n  transform: translate(34px, 0);\n  right: 0;\n  max-width: 246px;\n\n  &:after {\n    content: '';\n    display: block;\n    width: 0;\n    height: 0;\n    border-left: 10px solid transparent;\n    border-right: 10px solid transparent;\n    border-top: 10px solid ${({ theme }) => theme.tooltip.background};\n    bottom: 0;\n    position: absolute;\n    transform: translate(-34px, 9px);\n    right: 0;\n  }\n`\n\nconst Container = styled.div`\n  position: relative;\n\n  &:hover ${TooltipContent}, &:focus-within ${TooltipContent} {\n    display: block;\n  }\n`\n\nconst Tooltip: React.FunctionComponent<TooltipProps> = ({ content, children, className }) => {\n  return (\n    <Container>\n      {children}\n      <TooltipContent className={className}>{content}</TooltipContent>\n    </Container>\n  )\n}\n\nexport default Tooltip\n"],"sourceRoot":""}