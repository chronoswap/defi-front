{"version":3,"sources":["config/constants/nfts.ts","hooks/useGetWalletNfts.ts","views/Collectibles/components/InfoRow.tsx","views/Collectibles/components/TransferNftModal.tsx","views/Collectibles/components/ClaimNftModal.tsx","views/Collectibles/components/NftCard/Preview.tsx","views/Collectibles/components/NftCard/index.tsx","views/Collectibles/components/NftGrid.tsx","views/Collectibles/components/NftCard/BunnySpecialCard.tsx","views/Collectibles/components/NftList.tsx","views/Collectibles/index.tsx"],"names":["Nfts","name","description","images","lg","md","sm","ipfs","sortOrder","bunnyId","video","webm","mp4","blur","chronostoneContract","getChronostoneContract","initialState","isLoading","nfts","lastUpdated","Date","now","reducer","state","action","type","data","timestamp","useGetWalletNfts","useReducer","dispatch","account","useWeb3React","walletBalance","useState","setState","useEffect","methods","getBalancesByAddress","call","then","response","useGetWalletNftIds","nftUri","console","log","a","length","getNFTInfo","nftId","nftMeta","fetch","substring","toString","res","json","tokenIdPromises","i","push","Promise","all","tokenIdsOwnedByWallet","reduce","accum","association","tokenId","tokenUri","tokenIds","fetchNfts","refresh","InfoRow","styled","div","Value","Text","ModalContent","Actions","Label","label","theme","colors","text","TransferNftModal","nft","onSuccess","onDismiss","setIsLoading","value","setValue","error","setError","TranslateString","useI18n","pancakeRabbitsContract","usePancakeRabbits","toastSuccess","useToast","handleConfirm","Web3","utils","isAddress","transferFrom","send","from","on","title","color","mb","htmlFor","id","placeholder","onChange","evt","inputValue","target","isWarning","disabled","width","variant","onClick","ClaimNftModal","onClaim","isConfirming","setIsConfirming","toastError","once","alignItems","justifyContent","bold","endIcon","spin","Container","cardBorder","StyledImage","img","StyledVideo","Preview","isOwned","previewImageSrc","videoComponent","autoPlay","controls","loop","muted","poster","src","href","rel","previewImage","alt","Header","DetailsButton","Button","attrs","InfoBlock","NftCard","canClaim","isOpen","setIsOpen","walletOwnsNft","Icon","ChevronUpIcon","ChevronDownIcon","handleClick","handleSuccess","useModal","onPresentTransferModal","onPresentClaimModal","isActive","outline","mt","p","as","style","textAlign","NftGrid","mediaQueries","BunnySpeciaCard","props","isClaimable","setIsClaimable","bunnySpecialContract","useBunnySpecialContract","canClaimSingle","fetchClaimStatus","mintNFT","nftComponents","10","11","NftList","nftTokenIds","orderBy","map","Card","StyledHero","textSubtle","Collectibles","Page","scale"],"mappings":"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","file":"static/js/9.f6489dfe.chunk.js","sourcesContent":["import { Nft } from './types'\n\nconst Nfts: Nft[] = [\n  {\n    name: \"Cakeston Easter '21\",\n    description: 'Melting Easter eggs and melting hearts!',\n    images: {\n      lg: 'cakeston-easter-21-lg.png',\n      md: 'cakeston-easter-21-md.png',\n      sm: 'cakeston-easter-21-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-caker.png',\n    },\n    sortOrder: 999,\n    bunnyId: 14,\n  },\n  {\n    name: \"Flipsie Easter '21\",\n    description: 'Watch out for Flipsie’s spatula smash!',\n    images: {\n      lg: 'flipsie-easter-21-lg.png',\n      md: 'flipsie-easter-21-md.png',\n      sm: 'flipsie-easter-21-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-flipper.png',\n    },\n    sortOrder: 999,\n    bunnyId: 13,\n  },\n  {\n    name: \"Stormy Easter '21\",\n    description: 'Do you like chocolate with your syrup? Go long!',\n    images: {\n      lg: 'stormy-easter-21-lg.png',\n      md: 'stormy-easter-21-md.png',\n      sm: 'stormy-easter-21-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmZGqWaovULNEMKxBCGnGjh27JQkAyadS6AW4J4Lzf3XBp/easter-storm.png',\n    },\n    sortOrder: 999,\n    bunnyId: 12,\n  },\n  {\n    name: 'Bullish',\n    description: 'Happy Niu Year! This bunny’s excited for the year of the bull (market!)',\n    images: {\n      lg: 'bullish-lg.png',\n      md: 'bullish-md.png',\n      sm: 'bullish-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.png',\n    },\n    video: {\n      webm: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.webm',\n      mp4: 'https://gateway.pinata.cloud/ipfs/QmNS1A5HsRW1JvFWtGkm4o9TgZVe2P7kA8TB4yxvS6A7ms/bullish.mp4',\n    },\n    sortOrder: 999,\n    bunnyId: 11,\n  },\n  {\n    name: 'Hiccup',\n    description: \"Oopsie daisy! Hiccup's had a bit of an accident. Poor little fella.\",\n    images: {\n      lg: 'hiccup-lg.png',\n      md: 'hiccup-md.png',\n      sm: 'hiccup-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmQ6EE6gkVzAQUdQLLM7CyrnME6LZHCoy92ZERW8HXmyjw/hiccup.png',\n    },\n    sortOrder: 999,\n    bunnyId: 10,\n  },\n  {\n    name: 'Sleepy',\n    description: 'Aww, looks like eating pancakes all day is tough work. Sweet dreams!',\n    images: {\n      lg: 'sleepy-lg.png',\n      md: 'sleepy-md.png',\n      sm: 'sleepy-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/sleepy.png',\n      blur: 'sleepy-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 5,\n  },\n  {\n    name: 'Sunny',\n    description: 'Sunny is always cheerful when there are pancakes around. Smile!',\n    images: {\n      lg: 'sunny-lg.png',\n      md: 'sunny-md.png',\n      sm: 'sunny-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/sunny.png',\n      blur: 'sunny-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 9,\n  },\n  {\n    name: 'Churro',\n    description: \"Don't let that dopey smile deceive you... Churro's a master CAKE chef!\",\n    images: {\n      lg: 'churro-lg.png',\n      md: 'churro-md.png',\n      sm: 'churro-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/churro.png',\n      blur: 'churro-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 8,\n  },\n  {\n    name: 'Dollop',\n    description: \"Nommm... Oh hi, I'm just meditating on the meaning of CAKE.\",\n    images: {\n      lg: 'dollop-lg.png',\n      md: 'dollop-md.png',\n      sm: 'dollop-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/dollop.png',\n      blur: 'dollop-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 6,\n  },\n  {\n    name: 'Twinkle',\n    description: \"Three guesses what's put that twinkle in those eyes! (Hint: it's CAKE)\",\n    images: {\n      lg: 'twinkle-lg.png',\n      md: 'twinkle-md.png',\n      sm: 'twinkle-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmYD9AtzyQPjSa9jfZcZq88gSaRssdhGmKqQifUDjGFfXm/twinkle.png',\n      blur: 'twinkle-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 7,\n  },\n  {\n    name: 'Swapsies',\n    description: 'These bunnies love nothing more than swapping pancakes. Especially on BSC.',\n    images: {\n      lg: 'swapsies-lg.png',\n      md: 'swapsies-md.png',\n      sm: 'swapsies-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/swapsies.png',\n      blur: 'swapsies-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 0,\n  },\n  {\n    name: 'Drizzle',\n    description: \"It's raining syrup on this bunny, but he doesn't seem to mind. Can you blame him?\",\n    images: {\n      lg: 'drizzle-lg.png',\n      md: 'drizzle-md.png',\n      sm: 'drizzle-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/drizzle.png',\n      blur: 'drizzle-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 1,\n  },\n  {\n    name: 'Blueberries',\n    description: \"These bunnies like their pancakes with blueberries. What's your favorite topping?\",\n    images: {\n      lg: 'blueberries-lg.png',\n      md: 'blueberries-md.png',\n      sm: 'blueberries-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/blueberries.png',\n      blur: 'blueberries-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 2,\n  },\n  {\n    name: 'Circular',\n    description: \"Love makes the world go 'round... but so do pancakes. And these bunnies know it.\",\n    images: {\n      lg: 'circular-lg.png',\n      md: 'circular-md.png',\n      sm: 'circular-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/circular.png',\n      blur: 'circular-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 3,\n  },\n  {\n    name: 'Sparkle',\n    description: 'It’s sparkling syrup, pancakes, and even lottery tickets! This bunny really loves it.',\n    images: {\n      lg: 'sparkle-lg.png',\n      md: 'sparkle-md.png',\n      sm: 'sparkle-sm.png',\n      ipfs: 'https://gateway.pinata.cloud/ipfs/QmXdHqg3nywpNJWDevJQPtkz93vpfoHcZWQovFz2nmtPf5/sparkle.png',\n      blur: 'sparkle-blur.png',\n    },\n    sortOrder: 999,\n    bunnyId: 4,\n  },\n]\n\nexport default Nfts\n","import { useWeb3React } from '@web3-react/core'\nimport { useEffect, useReducer, useState } from 'react'\nimport { getPancakeRabbitContract, getChronostoneContract } from 'utils/contractHelpers'\n\nconst chronostoneContract = getChronostoneContract()\n\nexport type NftMap = {\n  [key: number]: {\n    tokenUri: string\n    tokenIds: number[]\n  }\n}\n\ntype Action = { type: 'set_nfts'; data: NftMap } | { type: 'reset' } | { type: 'refresh'; timestamp: number }\n\ntype State = {\n  isLoading: boolean\n  nfts: NftMap\n  lastUpdated: number\n}\n\nconst initialState: State = {\n  isLoading: true,\n  nfts: {},\n  lastUpdated: Date.now(),\n}\n\nconst reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'set_nfts':\n      return {\n        ...initialState,\n        isLoading: false,\n        nfts: action.data,\n      }\n    case 'refresh':\n      return {\n        ...initialState,\n        lastUpdated: action.timestamp,\n      }\n    case 'reset':\n      return {\n        ...initialState,\n        isLoading: false,\n      }\n    default:\n      return state\n  }\n}\n\nconst useGetWalletNftIds = (account) => {\n  const [state, setState] = useState([])\n  useEffect(() => {\n    if (account) {\n      chronostoneContract.methods.getBalancesByAddress(account).call().then(response => {setState(response)})\n    }\n  }, [account])\n  return state\n}\n\nconst useGetNftUri = () => {\n  const [state, setState] = useState(\"\")\n  useEffect(() => {\n    chronostoneContract.methods.uri(1).call().then(response => {setState(response)})\n  }, [])\n  return state\n}\n\nconst useGetWalletNfts = () => {\n  const [state, dispatch] = useReducer(reducer, initialState)\n  const { account } = useWeb3React()\n  const { lastUpdated } = state\n  const walletBalance = useGetWalletNftIds(account)\n  const nftUri = \"http://3.22.97.218:5000/get-card/{id}\"  // TODO useGetNftUri()\n  console.log(nftUri)\n\n  useEffect(() => {\n    const fetchNfts = async () => {\n      try {\n        if (walletBalance.length > 0) {\n          const getNFTInfo = async (nftId) => {\n            try {\n              let nftMeta = {}\n              fetch(nftUri.substring(0, nftUri.length - 4) + nftId.toString()).then(res => res.json()).then(response => {nftMeta = response})\n              return nftMeta\n            } catch (error) {\n              return null\n            }\n          }\n\n          const tokenIdPromises = []\n\n          for (let i = 0; i < walletBalance.length; i++) {\n            tokenIdPromises.push(getNFTInfo(walletBalance[i]))\n          }\n\n          const tokenIdsOwnedByWallet = await Promise.all(tokenIdPromises)\n          console.log(tokenIdsOwnedByWallet)\n          const nfts: NftMap = tokenIdsOwnedByWallet.reduce((accum, association) => {\n            if (!association) {\n              return accum\n            }\n\n            const [bunnyId, tokenId, tokenUri] = association\n\n            return {\n              ...accum,\n              [bunnyId]: {\n                tokenUri,\n                tokenIds: accum[bunnyId] ? [...accum[bunnyId].tokenIds, tokenId] : [tokenId],\n              },\n            }\n          }, {})\n\n          dispatch({ type: 'set_nfts', data: nfts })\n        } else {\n          // Reset it in case of wallet change\n          dispatch({ type: 'reset' })\n        }\n      } catch (error) {\n        dispatch({ type: 'reset' })\n      }\n    }\n\n    if (account) {\n      fetchNfts()\n    }\n  }, [account, lastUpdated, dispatch, walletBalance, nftUri])\n\n  const refresh = () => dispatch({ type: 'refresh', timestamp: Date.now() })\n\n  return { ...state, refresh }\n}\n\nexport default useGetWalletNfts\n","import styled from 'styled-components'\n\nconst InfoRow = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`\n\nexport default InfoRow\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport Web3 from 'web3'\nimport { useWeb3React } from '@web3-react/core'\nimport { Button, Input, Modal, Text } from '@chronoswap-packages/uikit'\nimport { useToast } from 'state/hooks'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport { usePancakeRabbits } from 'hooks/useContract'\nimport InfoRow from './InfoRow'\n\ninterface TransferNftModalProps {\n  nft: Nft\n  tokenIds: number[]\n  onSuccess: () => any\n  onDismiss?: () => void\n}\n\nconst Value = styled(Text)`\n  font-weight: 600;\n`\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst Label = styled.label`\n  color: ${({ theme }) => theme.colors.text};\n  display: block;\n  margin-bottom: 8px;\n  margin-top: 24px;\n`\n\nconst TransferNftModal: React.FC<TransferNftModalProps> = ({ nft, tokenIds, onSuccess, onDismiss }) => {\n  const [isLoading, setIsLoading] = useState(false)\n  const [value, setValue] = useState('')\n  const [error, setError] = useState(null)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const pancakeRabbitsContract = usePancakeRabbits()\n  const { toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    try {\n      const isValidAddress = Web3.utils.isAddress(value)\n\n      if (!isValidAddress) {\n        setError(TranslateString(999, 'Please enter a valid wallet address'))\n      } else {\n        await pancakeRabbitsContract.methods\n          .transferFrom(account, value, tokenIds[0])\n          .send({ from: account })\n          .on('sending', () => {\n            setIsLoading(true)\n          })\n          .on('receipt', () => {\n            onDismiss()\n            onSuccess()\n            toastSuccess('NFT successfully transferred!')\n          })\n          .on('error', () => {\n            console.error(error)\n            setError('Unable to transfer NFT')\n            setIsLoading(false)\n          })\n      }\n    } catch (err) {\n      console.error('Unable to transfer NFT:', err)\n    }\n  }\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    const { value: inputValue } = evt.target\n    setValue(inputValue)\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Transfer NFT')} onDismiss={onDismiss}>\n      <ModalContent>\n        {error && (\n          <Text color=\"failure\" mb=\"8px\">\n            {error}\n          </Text>\n        )}\n        <InfoRow>\n          <Text>{TranslateString(999, 'Transferring')}:</Text>\n          <Value>{`1x \"${nft.name}\" NFT`}</Value>\n        </InfoRow>\n        <Label htmlFor=\"transferAddress\">{TranslateString(999, 'Receiving address')}:</Label>\n        <Input\n          id=\"transferAddress\"\n          name=\"address\"\n          type=\"text\"\n          placeholder={TranslateString(999, 'Paste address')}\n          value={value}\n          onChange={handleChange}\n          isWarning={error}\n          disabled={isLoading}\n        />\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!account || isLoading || !value}>\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default TransferNftModal\n","import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport { PromiEvent } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { useWeb3React } from '@web3-react/core'\nimport { useToast } from 'state/hooks'\nimport { Button, InjectedModalProps, Modal, Text, Flex, AutoRenewIcon } from '@chronoswap-packages/uikit'\nimport { Nft } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\n\ninterface ClaimNftModalProps extends InjectedModalProps {\n  nft: Nft\n  onSuccess: () => void\n  onClaim: () => PromiEvent<Contract>\n}\n\nconst ModalContent = styled.div`\n  margin-bottom: 16px;\n`\n\nconst Actions = styled.div`\n  display: grid;\n  grid-template-columns: repeat(2, 1fr);\n  grid-gap: 8px;\n`\n\nconst ClaimNftModal: React.FC<ClaimNftModalProps> = ({ nft, onSuccess, onClaim, onDismiss }) => {\n  const [isConfirming, setIsConfirming] = useState(false)\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const { toastError, toastSuccess } = useToast()\n\n  const handleConfirm = async () => {\n    onClaim()\n      .once('sending', () => {\n        setIsConfirming(true)\n      })\n      .once('receipt', () => {\n        toastSuccess('Successfully claimed!')\n        onDismiss()\n        onSuccess()\n      })\n      .once('error', (error) => {\n        console.error('Unable to claim NFT', error)\n        toastError('Error', 'Unable to claim NFT, please try again.')\n        setIsConfirming(false)\n      })\n  }\n\n  return (\n    <Modal title={TranslateString(999, 'Claim Collectible')} onDismiss={onDismiss}>\n      <ModalContent>\n        <Flex alignItems=\"center\" mb=\"8px\" justifyContent=\"space-between\">\n          <Text>{TranslateString(626, 'You will receive')}:</Text>\n          <Text bold>{`1x \"${nft.name}\" Collectible`}</Text>\n        </Flex>\n      </ModalContent>\n      <Actions>\n        <Button width=\"100%\" variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          width=\"100%\"\n          onClick={handleConfirm}\n          disabled={!account}\n          isLoading={isConfirming}\n          endIcon={isConfirming ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\n        >\n          {TranslateString(464, 'Confirm')}\n        </Button>\n      </Actions>\n    </Modal>\n  )\n}\n\nexport default ClaimNftModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Nft } from 'config/constants/types'\n\ninterface PreviewProps {\n  nft: Nft\n  isOwned?: boolean\n}\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.colors.cardBorder};\n  position: relative;\n  width: 100%;\n  overflow: hidden;\n  padding-bottom: 100%;\n`\n\nconst StyledImage = styled.img`\n  position: absolute;\n  width: 100%;\n  top: 0;\n  left: 0;\n  transition: opacity 1s linear;\n  height: 100%;\n  object-fit: cover;\n  border-radius: 32px 32px 0 0;\n`\n\nconst StyledVideo = styled.video`\n  height: 100%;\n  width: 100%;\n`\n\nconst Preview: React.FC<PreviewProps> = ({ nft, isOwned = false }) => {\n  const { images, name, video } = nft\n  const previewImageSrc = `/images/nfts/${images.lg}`\n\n  if (video) {\n    const videoComponent = (\n      <StyledVideo autoPlay controls={false} loop muted poster={previewImageSrc}>\n        <source src={video.webm} type=\"video/webm\" />\n        <source src={video.mp4} type=\"video/mp4\" />\n      </StyledVideo>\n    )\n\n    return isOwned ? (\n      <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n        {videoComponent}\n      </a>\n    ) : (\n      videoComponent\n    )\n  }\n\n  const previewImage = <StyledImage src={previewImageSrc} alt={name} />\n\n  return (\n    <Container>\n      {isOwned ? (\n        <a href={images.ipfs} target=\"_blank\" rel=\"noreferrer noopener\">\n          {previewImage}\n        </a>\n      ) : (\n        previewImage\n      )}\n    </Container>\n  )\n}\n\nexport default Preview\n","import React, { useState } from 'react'\nimport { PromiEvent } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport styled from 'styled-components'\nimport {\n  Card,\n  CardBody,\n  Heading,\n  Tag,\n  Button,\n  ChevronUpIcon,\n  ChevronDownIcon,\n  Text,\n  CardFooter,\n  useModal,\n} from '@chronoswap-packages/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { Nft } from 'config/constants/types'\nimport InfoRow from '../InfoRow'\nimport TransferNftModal from '../TransferNftModal'\nimport ClaimNftModal from '../ClaimNftModal'\nimport Preview from './Preview'\n\nexport interface NftCardProps {\n  nft: Nft\n  canClaim?: boolean\n  tokenIds?: number[]\n  onClaim: () => PromiEvent<Contract>\n  lastUpdated: number\n  refresh: () => void\n}\n\nconst Header = styled(InfoRow)`\n  min-height: 28px;\n`\n\nconst DetailsButton = styled(Button).attrs({ variant: 'text' })`\n  height: auto;\n  padding: 16px 24px;\n\n  &:hover:not(:disabled):not(:active) {\n    background-color: transparent;\n  }\n\n  &:focus:not(:active) {\n    box-shadow: none;\n  }\n`\n\nconst InfoBlock = styled.div`\n  padding: 24px;\n`\n\nconst NftCard: React.FC<NftCardProps> = ({ nft, canClaim = false, tokenIds = [], onClaim, refresh }) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const TranslateString = useI18n()\n  const { name, description } = nft\n  const walletOwnsNft = tokenIds.length > 0\n  const Icon = isOpen ? ChevronUpIcon : ChevronDownIcon\n\n  const handleClick = async () => {\n    setIsOpen(!isOpen)\n  }\n\n  const handleSuccess = () => {\n    refresh()\n  }\n\n  const [onPresentTransferModal] = useModal(\n    <TransferNftModal nft={nft} tokenIds={tokenIds} onSuccess={handleSuccess} />,\n  )\n  const [onPresentClaimModal] = useModal(<ClaimNftModal nft={nft} onSuccess={handleSuccess} onClaim={onClaim} />)\n\n  return (\n    <Card isActive={walletOwnsNft}>\n      <Preview nft={nft} isOwned={walletOwnsNft} />\n      <CardBody>\n        <Header>\n          <Heading>{name}</Heading>\n          {walletOwnsNft && (\n            <Tag outline variant=\"secondary\">\n              {TranslateString(728, 'In Wallet')}\n            </Tag>\n          )}\n        </Header>\n        {canClaim && (\n          <Button width=\"100%\" mt=\"24px\" onClick={onPresentClaimModal}>\n            {TranslateString(652, 'Claim this NFT')}\n          </Button>\n        )}\n        {walletOwnsNft && (\n          <Button width=\"100%\" variant=\"secondary\" mt=\"24px\" onClick={onPresentTransferModal}>\n            {TranslateString(999, 'Transfer')}\n          </Button>\n        )}\n      </CardBody>\n      <CardFooter p=\"0\">\n        <DetailsButton width=\"100%\" endIcon={<Icon width=\"24px\" color=\"primary\" />} onClick={handleClick}>\n          {TranslateString(658, 'Details')}\n        </DetailsButton>\n        {isOpen && (\n          <InfoBlock>\n            <Text as=\"p\" color=\"textSubtle\" style={{ textAlign: 'center' }}>\n              {description}\n            </Text>\n          </InfoBlock>\n        )}\n      </CardFooter>\n    </Card>\n  )\n}\n\nexport default NftCard\n","import styled from 'styled-components'\n\nconst NftGrid = styled.div`\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  padding-bottom: 24px;\n  padding-top: 24px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    grid-template-columns: repeat(2, 1fr);\n  }\n\n  ${({ theme }) => theme.mediaQueries.md} {\n    grid-template-columns: repeat(3, 1fr);\n  }\n`\n\nexport default NftGrid\n","import React, { useEffect, useState } from 'react'\nimport { PromiEvent } from 'web3-core'\nimport { useWeb3React } from '@web3-react/core'\nimport { Contract } from 'web3-eth-contract'\nimport { useBunnySpecialContract } from 'hooks/useContract'\nimport NftCard, { NftCardProps } from './index'\n\nconst BunnySpeciaCard: React.FC<NftCardProps> = ({ nft, lastUpdated, ...props }) => {\n  const [isClaimable, setIsClaimable] = useState(false)\n  const { account } = useWeb3React()\n  const bunnySpecialContract = useBunnySpecialContract()\n  const { bunnyId } = nft\n\n  const handleClaim = (): PromiEvent<Contract> => {\n    return bunnySpecialContract.methods.mintNFT(bunnyId).send({ from: account })\n  }\n\n  useEffect(() => {\n    const fetchClaimStatus = async () => {\n      const canClaimSingle = await bunnySpecialContract.methods.canClaimSingle(account, bunnyId).call()\n      setIsClaimable(canClaimSingle)\n    }\n\n    if (account) {\n      fetchClaimStatus()\n    }\n  }, [account, bunnyId, lastUpdated, bunnySpecialContract, setIsClaimable])\n\n  return <NftCard nft={nft} lastUpdated={lastUpdated} {...props} canClaim={isClaimable} onClaim={handleClaim} />\n}\n\nexport default BunnySpeciaCard\n","import React from 'react'\nimport orderBy from 'lodash/orderBy'\nimport nfts from 'config/constants/nfts'\nimport useGetWalletNfts from 'hooks/useGetWalletNfts'\nimport NftCard from './NftCard'\nimport NftGrid from './NftGrid'\nimport BunnySpeciaCard from './NftCard/BunnySpecialCard'\n\n/**\n * A map of bunnyIds to special campaigns (NFT distribution)\n * Each NftCard is responsible for checking it's own claim status\n *\n */\nconst nftComponents = {\n  10: BunnySpeciaCard,\n  11: BunnySpeciaCard,\n}\n\nconst NftList = () => {\n  const { nfts: nftTokenIds, refresh, lastUpdated } = useGetWalletNfts()\n\n  return (\n    <NftGrid>\n      {orderBy(nfts, 'sortOrder').map((nft) => {\n        const tokenIds = nftTokenIds[nft.bunnyId] ? nftTokenIds[nft.bunnyId].tokenIds : []\n        const Card = nftComponents[nft.bunnyId] || NftCard\n\n        return (\n          <div key={nft.name}>\n            <Card nft={nft} tokenIds={tokenIds} refresh={refresh} lastUpdated={lastUpdated} />\n          </div>\n        )\n      })}\n    </NftGrid>\n  )\n}\n\nexport default NftList\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading } from '@chronoswap-packages/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport NftList from './components/NftList'\n\nconst StyledHero = styled.div`\n  border-bottom: 2px solid ${({ theme }) => theme.colors.textSubtle};\n  margin-bottom: 24px;\n  padding-bottom: 32px;\n`\n\nconst Collectibles = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <StyledHero>\n        <Heading as=\"h1\" scale=\"xxl\" color=\"secondary\">\n          {TranslateString(999, 'Chronostone Collectibles')}\n        </Heading>\n      </StyledHero>\n      <NftList />\n    </Page>\n  )\n}\n\nexport default Collectibles\n"],"sourceRoot":""}