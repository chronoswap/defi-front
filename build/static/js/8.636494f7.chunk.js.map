{"version":3,"sources":["hooks/useTokenBalance.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/ChronostoneCard.tsx","hooks/useGetThoPPerBlock.ts","views/Home/components/CakeStats.tsx","hooks/useGetTvl.ts","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/EarnAPYCard.tsx","views/Home/Home.tsx"],"names":["useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","a","cakeContract","getCakeContract","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","web3","useWeb3","contract","getBep20Contract","balanceOf","res","fetchBalance","useTokenBalance","account","useWeb3React","fastRefresh","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","fetchBalances","useAllEarnings","balances","fetchAllBalances","Block","styled","div","CakeHarvestBalance","TranslateString","useI18n","earningsSum","reduce","accum","earning","pow","toNumber","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CardValue","value","lineHeight","eq","CardBusdValue","color","style","CakeWalletBalance","cakeBalance","getCakeAddress","busdBalance","getBalanceNumber","decimals","fontSize","StyledFarmStakingCard","Card","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","scale","mb","src","alt","width","height","id","disabled","length","onClick","count","UnlockButton","useGetThoPPerBlock","thoPPerBlock","setthoPPerBlock","masterChefContract","getMasterchefContract","cakePerBlock","rawThoPPerBlock","_thoPPerBlock","fetchThoPPerBlock","StyledCakeStats","Row","CakeStats","burnedBalance","cakeSupply","useGetStats","pools","farms","prices","useGetApiPrices","farmsLP","useFarms","poolCalls","poolsConfig","poolConfig","getAddress","tokens","cake","contractAddress","cakeABI","tokenBalancePool","tokenBalancePoolSum","farmsPrice","forEach","element","quotePrice","quoteToken","tokenPrice","token","quoteTotalPrice","quoteTokenAmount","times","tokenTotalPrice","tokenAmount","push","Number","isNaN","tokenBalanceFarmSum","Math","round","StyledTotalValueLockedCard","TvlHeading","Heading","CenteredText","Text","TotalValueLockedCard","tvl","mediaQueries","lg","CardMidContent","attrs","size","EarnAPYCard","cakePrice","highestApy","useMemo","apys","multiplier","lpTotalInQuoteToken","quoteTokenPriceUsd","toLowerCase","totalLiquidity","getFarmApy","poolWeight","maxApy","max","toLocaleString","maximumFractionDigits","animation","variant","justifyContent","exact","activeClassName","to","mt","Hero","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard","ChronostoneCard"],"mappings":"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","file":"static/js/8.636494f7.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport { getBep20Contract, getCakeContract } from 'utils/contractHelpers'\nimport useWeb3 from './useWeb3'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account } = useWeb3React()\n  const web3 = useWeb3()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf(account).call()\n      setBalance(new BigNumber(res))\n    }\n\n    if (account) {\n      fetchBalance()\n    }\n  }, [account, tokenAddress, web3, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getCakeContract()\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n  const web3 = useWeb3()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const contract = getBep20Contract(tokenAddress, web3)\n      const res = await contract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(res))\n    }\n\n    fetchBalance()\n  }, [web3, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWeb3React } from '@web3-react/core'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account } = useWeb3React()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React from 'react'\nimport { Text } from '@chronoswap-packages/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport styled from 'styled-components'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst Block = styled.div`\n  margin-bottom: 24px;\n`\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWeb3React()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const cakePriceBusd = usePriceCakeBusd()\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '76px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <Block>\n      <CardValue value={earningsSum} lineHeight=\"1.5\" />\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\n    </Block>\n  )\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@chronoswap-packages/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { BigNumber } from 'bignumber.js'\nimport CardValue from './CardValue'\nimport CardBusdValue from './CardBusdValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const cakePriceBusd = usePriceCakeBusd()\n  const busdBalance = new BigNumber(getBalanceNumber(cakeBalance)).multipliedBy(cakePriceBusd).toNumber()\n  const { account } = useWeb3React()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '54px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return (\n    <>\n      <CardValue value={getBalanceNumber(cakeBalance)} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance} /> : <br />}\n    </>\n  )\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@chronoswap-packages/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'ThoP to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'ThoP in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting ThoP')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@chronoswap-packages/uikit'\nimport { useWeb3React } from '@web3-react/core'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/cake-bg.svg');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWeb3React()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {TranslateString(577, 'Chronostone')}\n        </Heading>\n        <CardImage src=\"/images/cake.svg\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'TKN1 to Harvest')}:</Label>\n          <CakeHarvestBalance />\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'TKN1 in Wallet')}:</Label>\n          <CakeWalletBalance />\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              width=\"100%\"\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting CAKE')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`, {\n                    count: balancesWithValue.length,\n                  })}\n            </Button>\n          ) : (\n            <UnlockButton width=\"100%\" />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import { useEffect, useState } from 'react'\nimport { getMasterchefContract } from 'utils/contractHelpers'\nimport BigNumber from 'bignumber.js'\nimport useRefresh from './useRefresh'\n\nconst useGetThoPPerBlock = () => {\n  const [thoPPerBlock, setthoPPerBlock] = useState(0)\n  const { slowRefresh } = useRefresh()\n  const masterChefContract = getMasterchefContract()\n\n  useEffect(() => {\n    const fetchThoPPerBlock = async () => {\n      const rawThoPPerBlock = await masterChefContract.methods.cakePerBlock().call()\n      const _thoPPerBlock = new BigNumber(rawThoPPerBlock).div(10**18) // TODO No me gusta meter datos a piñone\n      setthoPPerBlock(_thoPPerBlock.toNumber())\n    }\n    fetchThoPPerBlock()\n  }, [slowRefresh, masterChefContract])\n\n  return thoPPerBlock\n}\n\nexport default useGetThoPPerBlock\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@chronoswap-packages/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport useGetThoPPerBlock from 'hooks/useGetThoPPerBlock'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\n  const thoPPerBlock = useGetThoPPerBlock()\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading scale=\"xl\" mb=\"24px\">\n          {TranslateString(534, 'ThoP Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total ThoP Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total ThoP Burned')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={burnedBalance} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New ThoP/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={thoPPerBlock} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import { useEffect, useState } from 'react'\nimport multicall from 'utils/multicall'\nimport { getAddress } from 'utils/addressHelpers'\nimport poolsConfig from 'config/constants/pools'\nimport tokens from 'config/constants/tokens'\nimport cakeABI from 'config/abi/cake.json'\nimport useRefresh from 'hooks/useRefresh'\nimport BigNumber from 'bignumber.js'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\n\nconst useGetStats = () => {\n  const [balances, setBalance] = useState({pools: 0.0, farms: 0.0})\n  const { fastRefresh } = useRefresh()\n  const prices = useGetApiPrices()\n  const cakePriceBusd = usePriceCakeBusd()\n  const farmsLP = useFarms()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const poolCalls = poolsConfig.map((poolConfig) => ({\n        address: getAddress(tokens.cake.address),\n        name: 'balanceOf',\n        params: [getAddress(poolConfig.contractAddress)],\n      }))\n      const tokenBalancePool = await multicall(cakeABI, poolCalls)\n      const tokenBalancePoolSum = tokenBalancePool.reduce((accum, earning) => {\n        return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n      }, 0)\n\n      const farmsPrice = []\n      let quotePrice\n      let tokenPrice\n      let quoteTotalPrice\n      let tokenTotalPrice\n      // TODO A checkear porque tengo una ñapa con la api de precios que habrá que quitar en mainnet\n      farmsLP.forEach(element => {\n        quotePrice = prices[getAddress(element.quoteToken.address)] ? new BigNumber(prices[getAddress(element.quoteToken.address)]).toNumber() : cakePriceBusd.toNumber()\n        tokenPrice = element.token === tokens.cake ? cakePriceBusd.toNumber() : new BigNumber(prices[getAddress(element.token.address)]).toNumber()\n        quoteTotalPrice = element.quoteTokenAmount ? new BigNumber(element.quoteTokenAmount).times(quotePrice).toNumber() : 0\n        tokenTotalPrice = element.tokenAmount ? new BigNumber(element.tokenAmount).times(tokenPrice).toNumber() : 0\n        farmsPrice.push(Number.isNaN(quoteTotalPrice + tokenTotalPrice) ? 0 : (quoteTotalPrice + tokenTotalPrice));\n      });\n\n      const tokenBalanceFarmSum = farmsPrice.reduce((accum, earning) => {\n        return accum + earning\n      }, 0)\n      setBalance({pools: tokenBalancePoolSum, farms: tokenBalanceFarmSum})\n    }\n    fetchBalances()\n  }, [fastRefresh, prices, cakePriceBusd, farmsLP])\n\n  const tvl = Math.round(new BigNumber(balances.pools).multipliedBy(cakePriceBusd).toNumber() * 100) / 100\n  return tvl + balances.farms\n}\n\nexport default useGetStats;\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@chronoswap-packages/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useGetStats from 'hooks/useGetTvl'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n`\n\nconst TvlHeading = styled(Heading)`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n`\n\nconst CenteredText = styled(Text)`\n  text-align: center;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  const tvl = useGetStats()\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading scale=\"lg\" mb=\"24px\">\n          {TranslateString(762, 'Total Value Locked (TVL)')}\n        </Heading>\n        {tvl ? (\n          <>\n            <TvlHeading scale=\"xl\">\n              $<CardValue value={tvl}/>\n            </TvlHeading>\n            <CenteredText color=\"textSubtle\">\n              {TranslateString(764, 'Across all LPs and Syrup Pools')}\n            </CenteredText>\n          </>\n        ) : (\n          <Skeleton height={66} />\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React, { useMemo } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@chronoswap-packages/uikit'\nimport max from 'lodash/max'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { getFarmApy } from 'utils/apy'\nimport { useFarms, usePriceCakeBusd, useGetApiPrices } from 'state/hooks'\nimport { getAddress } from 'utils/addressHelpers'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const prices = useGetApiPrices()\n  const cakePrice = usePriceCakeBusd()\n\n  const highestApy = useMemo(() => {\n    const apys = farmsLP\n      // Filter inactive farms, because their theoretical APY is super high. In practice, it's 0.\n      .filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n      .map((farm) => {\n        if (farm.lpTotalInQuoteToken && prices) {  // TODO la funcion get Address ojito con el true\n          const quoteTokenPriceUsd = prices[getAddress(farm.quoteToken.address, true).toLowerCase()]\n          const totalLiquidity = new BigNumber(farm.lpTotalInQuoteToken).times(quoteTokenPriceUsd)\n          return getFarmApy(farm.poolWeight, cakePrice, totalLiquidity)\n        }\n        return null\n      })\n\n    const maxApy = max(apys)\n    return maxApy?.toLocaleString('en-US', { maximumFractionDigits: 2 })\n  }, [cakePrice, farmsLP, prices])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" scale=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent>\n          {highestApy ? (\n            `${highestApy}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" scale=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from 'uikit'  // '@chronoswap-packages/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport ChronostoneCard from 'views/Home/components/ChronostoneCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/pan-bg-mobile.svg');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/pan-bg2.svg'), url('/images/pan-bg.svg');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n  margin-top: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <>\n      <Page>\n        <Hero>\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"secondary\">\n            {TranslateString(576, 'Chronoswap')}\n          </Heading>\n          <Text>{TranslateString(578, 'Your AMM and yield farm on Binance Smart Chain.')}</Text>\n        </Hero>\n        <div>\n          <Cards>\n            <FarmStakingCard />\n            <ChronostoneCard />\n          </Cards>\n          <TotalValueLockedCard />\n          <Cards>\n            <CakeStats />\n            <EarnAPYCard />\n          </Cards>\n        </div>\n      </Page>\n    </>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}